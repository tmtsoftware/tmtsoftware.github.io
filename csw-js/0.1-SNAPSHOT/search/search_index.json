{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"TMT CSW JavaScript Adapters"},{"location":"/index.html#tmt-csw-javascript-adapters","text":"csw-js provides following JavaScript adapters.\nAAS Javascript Adapter (csw-aas-js)","title":"TMT CSW JavaScript Adapters"},{"location":"/aas/csw-aas-js.html","text":"","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#javascript-adapter-csw-aas-js-","text":"csw-aas-js is an npm package which provides React components that integrate with the CSW Authentication and Authorization Service. UI applications can use these React components to enable the application to show or hide components based on the authentication and authorization policy. csw-aas-js is written in typescript and it bundles transpiled es6 module along with type declarations.","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#dependencies","text":"To use the csw-aas-js adapter, run this command from root folder of your application where package.json exists:\nnpm     npm i --save csw-aas-js@0.1-SNAPSHOT\n yarn     yarn add csw-aas-js@0.1-SNAPSHOT","title":"Dependencies"},{"location":"/aas/csw-aas-js.html#application-configuration","text":"Web application needs following configurations in order to get access token from keycloak server. This application specific config object should be passed in AuthContextProvider component. There are two configurations needed for a web application i.e. realm, clientId\nrealm is a mandatory configuration which specified in keycloak server under which client for your application is registered.\nclientId is a mandatory configuration which specifies the client id of the app as per registration in keycloak server.\nJavascript export const AppConfig = {\n  realm: 'example',\n  clientId: 'example-app',\n}","title":"Application Configuration"},{"location":"/aas/csw-aas-js.html#components","text":"csw-aas-js exposes the following React components.\nAuthContextProvider Consumer Login Logout CheckLogin RealmRole ClientRole\nComponents can be imported as shown in code snippet below\nJavascript import { AuthContext, Logout, Login } from 'csw-aas-js'","title":"Components"},{"location":"/aas/csw-aas-js.html#authcontextprovider","text":"AuthContextProvider is wrapper over a React Context.Provider. A JSON configuration file must be passed in that contains the application specific AAS server configuration (e.g. clientId, realm). When a user logs in, an AAS Server is instantiated, with the UI application specific configuration overriding the predefined configuration. Once the AAS sever is instantiated, an auth object is created with the needed attributes and APIs. This auth object is available to other React components; since AuthContextProvider is a Provider, its data can be shared with any of the children React components in its tree in a Consumer component (see below). All Consumers that are descendants of a Provider will re-render whenever the AuthContextProvider’s state changes, e.g. a user authorizes. It is recommended to use AuthContextProvider to wrap the entire application so that data can be shared anywhere in application via a Consumer.\nJavascript <AuthContextProvider config={AppConfig}>\n  <BrowserRouter>\n    <div>\n      <NavComponent />\n      <Route\n        exact\n        path='/secured'\n        render={_ => (\n          <CheckLogin error={<ExampleError />}>\n            <Write />\n          </CheckLogin>\n        )}\n      />\n      <Route exact path='/public' component={Read} />\n    </div>\n  </BrowserRouter>\n\n  {\n    <RealmRole realmRole='example-admin-role' error={<ExampleError />}>\n      <div>Example admin role specific functionality</div>\n    </RealmRole>\n  }\n  {\n    <ClientRole\n      clientRole='person-role'\n      client='example-server'\n      error={<ExampleError />}>\n      <div>Person role specific functionality</div>\n    </ClientRole>\n  }\n</AuthContextProvider>","title":"AuthContextProvider"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"AuthContextProvider Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#consumer","text":"Consumer is similar to a React Context.Consumer. The shared auth object from the AuthContextProvider can be accessed using a Consumer component\nJavascript const { auth } = useContext(AuthContext)\nreturn (\n  <div className='nav-wrapper'>\n    {auth && auth.isAuthenticated() ? (\n      <div>\n        Hello, you are logged in\n        <div>Open functionality</div>\n      </div>\n    ) : (\n      <div>\n        Hello, you are not logged in\n        <div>Open functionality</div>\n      </div>\n    )}\n  </div>\n)","title":"Consumer"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"Consumer Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#login","text":"The Login component instantiates an AAS server with the configurations provided. It redirects to an AAS server login page for the user to login. After login, the auth object in the context is updated with the appropriate values, e.g. token, realm & client roles etc.\nJavascript <Login />","title":"Login"},{"location":"/aas/csw-aas-js.html#source-code-for-login-component","text":"Login Component","title":"Source code for Login component"},{"location":"/aas/csw-aas-js.html#logout","text":"The Logout component logs out the user from the AAS server. It clears the auth object stored in the context.\nJavascript   <Logout />\n) : (","title":"Logout"},{"location":"/aas/csw-aas-js.html#source-code-for-logout-component","text":"Logout Component","title":"Source code for Logout component"},{"location":"/aas/csw-aas-js.html#checklogin","text":"CheckLogin components provide ability to show something only if the user is logged in. In the following code snippet, Write is a react component that is shown only if the user is logged in. The behavior if the user is not logged in can be defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <CheckLogin error={<ExampleError />}>\n  <Write />\n</CheckLogin>","title":"CheckLogin"},{"location":"/aas/csw-aas-js.html#source-code-for-checklogin-component","text":"CheckLogin Component","title":"Source code for CheckLogin component"},{"location":"/aas/csw-aas-js.html#realmrole","text":"RealmRole components provide the ability to show something only if the user is logged in and has the specified realm role. In the following code snippet, the contents of the div block are shown only if the user is logged in and has the realm role specified in the realmRole prop. Similar to CheckLogin, the behaviour if the user is not logged in can be optionally defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <RealmRole realmRole='example-admin-role' error={<ExampleError />}>\n  <div>Example admin role specific functionality</div>\n</RealmRole>","title":"RealmRole"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"RealmRole Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#clientrole","text":"ClientRole components provide the ability to show something only if the user is logged in and has the specified client role for the specified client. In the following code snippet, the contents of the div block are shown only if the user is logged in and has the client role for specified client in the clientRole prop. Similar to RealmRole, the behaviour if the user is not logged in can be optionally defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <ClientRole\n  clientRole='person-role'\n  client='example-server'\n  error={<ExampleError />}>\n  <div>Person role specific functionality</div>\n</ClientRole>","title":"ClientRole"},{"location":"/aas/csw-aas-js.html#source-code-for-clientrole-component","text":"ClientRole Component","title":"Source code for ClientRole component"},{"location":"/aas/csw-aas-js.html#technical-description","text":"See csw-aas-js Technical Description.","title":"Technical Description"},{"location":"/technical/csw-aas-js.html","text":"","title":"csw-aas-js - Javascript adapter"},{"location":"/technical/csw-aas-js.html#csw-aas-js-javascript-adapter","text":"csw-aas-js is a npm package which exposes react components to enable authentication and authorization. csw-aas-js is built on top of keycloak-js","title":"csw-aas-js - Javascript adapter"},{"location":"/technical/csw-aas-js.html#csw-aas-js-implementation","text":"Core implementation of csw-aas-js uses\nkeycloak-js - keycloak javascript adapter React - JavaScript library for building user interfaces Typescript - Types superset of JavaScript which compiles to JavaScript csw-location-service - resolve keycloak using location service http endpoint","title":"csw-aas-js Implementation"},{"location":"/technical/csw-aas-js.html#project-setup","text":"csw-aas-js is a library written in Typescript. tsc is a command line compiler of Typescript which compiles typescrit files to JavaScript. tsc picks up configurations from tsconfig.json file which is at root level of project. tsconfig.json allows to configure multiple compiler options. Please refer this for details of compiler options. csw-aas-js is bundled as ES6 module using rollup bundler. Rollup statically analyzes the code being imported, and will exclude anything that isn’t actually used. It bundles small pieces of code and creates one javascript module in specifies format. In case of csw-aas-js it creates index.es.js ES6 module. Along with index.es.js, csw-aas-js also bundles type declaration files which provide typings for react components exported by library. package.json points to index.es.js as a entry point for library and index.d.ts as types. This will help csw-aas-js library users to know type signatures of components. e.g. type signature for react component props, api signatures. csw-aas-js can be seamlessly consumed by applications written ES6 or Typescript.","title":"Project setup"},{"location":"/technical/csw-aas-js.html#keycloak","text":"In order for web application utilize keycloak following steps are needed:\nRegistered web application as a public keycloak client Please refer to keycloak documentation for details. Create new Keycloak client instance This instantiation expects config which includes keycloak server url and some application specific config like realm and clientId. csw-aas-js uses csw location service to resolve keycloak server. If you don’t want to use location service, you can provide AAS-server-url along with realm and clientId in web application config.\nconst AppConfig = {\n  realm: 'example',\n  clientId: 'example-app',\n  'AAS-server-url': 'http://localhost:8081/auth'\n}\nInitialize javascript adapter To call secure end point, web application first needs to be authenticated using keycloak server. There are two options to make this adapter automatically authenticate - login-required and check-sso. login-required will automatically authenticate if the user is already logged-in, otherwise it will display keycloak login page. check-sso will only authenticate if the user is already logged-in. If the user is not logged-in the browser will be redirected back to the application and remain unauthenticated.\ncsw-aas-js use check-sso to instantiate keycloak. It shows secure components if user is already logged in. If user is not authenticated Login component is rendered. If user clicks on login button it instantiates keyclock use login-required. This redirects user to keycloak login page. As access token has very short life span, at time of keycloak instantiation csw-aas-js also adds hooks to refresh token. This gives seamless user experience as user need not to login again.\nKeycloak adapter supports three authorization flows e.g. authorization code flow, implicit flow and hybrid flow. csw-aas-js has chosen hybrid flow as it has better performance than authorization code flow and unlike implicit flow, hybrid flow makes refresh token available to application. For more information please refer keyclok documentaion for authorization flows","title":"Keycloak"},{"location":"/technical/csw-aas-js.html#working-of-csw-aas-js","text":"When user opens web application in browser, AuthContextProvider component is mounted. Which does instantiation of keycloak client and initialize keycloak javascript adapter with check-sso and hybrid authorization flow. It also creates hooks for refreshing token when token is expired which silently refresh token resulting seamless user experience once logged in. After authentication is done via keycloak javascript adapter, AuthContext is extracted in domain model and this data is passed down the component tree using react context api. AuthContext gives handle to token, realm and resource roles, userInfo. Any component which want to use this information can become consumer of AuthContext. For example\nJavascript const { auth } = useContext(AuthContext)\nAccess token can be extracted from auth and it can be sent in Authorization header for calling secure api\nFor example -\nconst SampleComponent = () => {\n\n    const url = 'http://localhost:8080/secure-restful-service';\n    const auth = useContext(AuthContext) //AuthContext from csw-aas-js\n      \n    const req = new XMLHttpRequest();\n    req.open('GET', url, true);\n    req.setRequestHeader('Accept', 'application/json');\n    \n    //extract token from auth context and set Authorization header\n    req.setRequestHeader('Authorization', 'Bearer ' + auth.token);\n\n    req.onreadystatechange = function () {\n        if (req.readyState == 4) {\n            if (req.status == 200) {\n                alert('Success');\n            } else if (req.status == 403) {\n                alert('Forbidden');\n            }\n        }\n    }\n\n    req.send();\n};\nFollowing diagram explains javascript application flow for making request to secure http api\nWhen user opens web application in browser, csw-aas-js checks if user is already logged in using check-sso mode. If user is not logged in then Login button is shown. When user clicks on login, user will be redirected to keyclok login page. This completes authentication process. Once authentication is done, AuthContextProvider extract AuthContext domain model and make it available to consumers of AuthContext. Protected react components can be shown based on information in AuthContext. For example, CreateConfig component can be shown only to users having config admin role. After the user is authenticated the application can make requests to RESTful services secured by Keycloak by including the bearer token in the Authorization header. This completed workflow for web application calling secure http endpoint.","title":"Working of csw-aas-js"}]}