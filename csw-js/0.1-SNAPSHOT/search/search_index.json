{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"TMT CSW Javascript Adapters"},{"location":"/index.html#tmt-csw-javascript-adapters","text":"csw-js provides following javascript adapters.\nAAS Javascript Adapter (csw-aas-js)","title":"TMT CSW Javascript Adapters"},{"location":"/aas/csw-aas-js.html","text":"","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#javascript-adapter-csw-aas-js-","text":"csw-aas-js is a npm package which provides react components. UI applications can use these react components which will enable UI application to show or hide components based on authentication and authorization policy.","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#dependencies","text":"To use the csw-aas-js adapter, run this command from root folder of your application where package.json exists:\nnpm     npm i --save csw-aas-js@0.1-SNAPSHOT\n yarn     yarn add csw-aas-js@0.1-SNAPSHOT","title":"Dependencies"},{"location":"/aas/csw-aas-js.html#components","text":"csw-aas-js exposes react components.\nJavascript export {\n  Logout,\n  Login,\n  CheckLogin,\n  RealmRole,\n  ClientRole,\n  AuthContextProvider,\n  Consumer,\n  AuthContext,\n}\nImporting and usage of those components is explained below:","title":"Components"},{"location":"/aas/csw-aas-js.html#importing-components","text":"Components can be imported as shown in code snippet below\nJavascript import { Consumer, Logout, Login } from 'csw-aas-js'\ncsw-aas-js exposes following react components:\nAuthContextProvider Consumer Login Logout CheckLogin RealmRole ClientRole","title":"Importing components"},{"location":"/aas/csw-aas-js.html#authcontextprovider","text":"AuthContextProvider is wrapper over provider from react context API. It expects config json to be passed. This config json is UI application specific AAS server configuration e.g. clientId, realm. When user loges in AAS Server is instantiated by merging UI application specific config and predefined configuration. UI application can choose to override predefined json configuration. Once AAS sever is instantiated, auth object is updated with needed attributes and apis. This auth is available to all react components. Auth Context is designed to share data that can be considered “global” for a tree of React components and is available via Consumer. All consumers that are descendants of a Provider will re-render whenever the AuthContextProvider’s state changes i.e auth. Recommended way is use AuthContextProvider to wrap entire application so that data can be shared anywhere in application via Consumer.\nJavascript <AuthContextProvider config={config}>\n  <BrowserRouter>\n    <div>\n      <NavComponent />\n      <Route\n        exact\n        path='/secured'\n        render={_ => (\n          <CheckLogin error={<ExampleError />}>\n            <Write />\n          </CheckLogin>\n        )}\n      />\n      <Route exact path='/public' component={Read} />\n    </div>\n  </BrowserRouter>\n\n  {\n    <RealmRole\n      realmRole='example-admin-role'\n      error={<ExampleError />}>\n      <div>Example admin role specific functionality</div>\n    </RealmRole>\n  }\n  {\n    <ClientRole\n      clientRole='person-role'\n      client='example-server'\n      error={<ExampleError />}>\n      <div>Person role specific functionality</div>\n    </ClientRole>\n  }\n</AuthContextProvider>","title":"AuthContextProvider"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"AuthContextProvider Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#consumer","text":"Consumer is similar to consumer from react context api. auth can be accessed using Consumer component\nJavascript <Consumer>\n  {({ auth }) => {\n    return (\n      <div className='nav-wrapper'>\n        {auth && auth.isAuthenticated() ? (\n          <div>\n            Hello, you are logged in\n            <div>Open functionality</div>\n          </div>\n        ) : (\n          <div>\n            Hello, you are not logged in\n            <div>Open functionality</div>\n          </div>\n        )}\n      </div>\n    )\n  }}\n</Consumer>","title":"Consumer"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"Consumer Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#login","text":"Login component instantiate AAS server with configurations provided. It redirects to AAS server login page for user to login. After login auth in context is updated with appropriate values e.g. token, realm & client roles etc.\nJavascript <Login />","title":"Login"},{"location":"/aas/csw-aas-js.html#source-code-for-login-component","text":"Login Component","title":"Source code for Login component"},{"location":"/aas/csw-aas-js.html#logout","text":"Logout component logs out user from AAS server. It clears auth stored in context.\nJavascript   <Logout />\n) : (","title":"Logout"},{"location":"/aas/csw-aas-js.html#source-code-for-logout-component","text":"Logout Component","title":"Source code for Logout component"},{"location":"/aas/csw-aas-js.html#checklogin","text":"CheckLogin components provides ability to show something only if user is logged in. In the following code snippet Write is a react component is shown only if user is logged in. Behaviour is user is not logged in can be defined by html element or react component and that can be passed to error prop e.g - ExampleError Component in following snippet\nJavascript <CheckLogin error={<ExampleError />}>\n  <Write />\n</CheckLogin>","title":"CheckLogin"},{"location":"/aas/csw-aas-js.html#source-code-for-checklogin-component","text":"CheckLogin Component","title":"Source code for CheckLogin component"},{"location":"/aas/csw-aas-js.html#realmrole","text":"RealmRole components provides ability to show something only if user is logged in and has specified realm role. In the following code snippet div is shown only if user is logged in and has realm role specified in realmRole prop Behaviour is user is not logged in can be optionally defined by html element or react component and that can be passed to error prop e.g - ExampleError Component in following snippet.\nJavascript <RealmRole\n  realmRole='example-admin-role'\n  error={<ExampleError />}>\n  <div>Example admin role specific functionality</div>\n</RealmRole>","title":"RealmRole"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"RealmRole Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#clientrole","text":"ClientRole components provides ability to show something only if user is logged in and has specified client role for specified client. In the following code snippet div is shown only if user is logged in and has client role specified in clientRole prop for client specified in client prop. Behaviour is user is not logged in can be optionally defined by html element or react component and that can be passed to error prop e.g - ExampleError Component in following snippet.\nJavascript <ClientRole\n  clientRole='person-role'\n  client='example-server'\n  error={<ExampleError />}>\n  <div>Person role specific functionality</div>\n</ClientRole>","title":"ClientRole"},{"location":"/aas/csw-aas-js.html#source-code-for-clientrole-component","text":"ClientRole Component","title":"Source code for ClientRole component"}]}