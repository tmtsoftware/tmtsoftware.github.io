{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"TMT CSW JavaScript Adapters"},{"location":"/index.html#tmt-csw-javascript-adapters","text":"csw-js provides following JavaScript adapters.\nAAS Javascript Adapter (csw-aas-js)","title":"TMT CSW JavaScript Adapters"},{"location":"/aas/csw-aas-js.html","text":"","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#javascript-adapter-csw-aas-js-","text":"csw-aas-js is an npm package which provides React components that integrate with the CSW Authentication and Authorization Service. UI applications can use these React components to enable the application to show or hide components based on the authentication and authorization policy.","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#dependencies","text":"To use the csw-aas-js adapter, run this command from root folder of your application where package.json exists:\nnpm     npm i --save csw-aas-js@0.1-SNAPSHOT\n yarn     yarn add csw-aas-js@0.1-SNAPSHOT","title":"Dependencies"},{"location":"/aas/csw-aas-js.html#components","text":"csw-aas-js exposes the following React components.\nAuthContextProvider Consumer Login Logout CheckLogin RealmRole ClientRole\nComponents can be imported as shown in code snippet below\nJavascript import { Consumer, Logout, Login } from 'csw-aas-js'","title":"Components"},{"location":"/aas/csw-aas-js.html#authcontextprovider","text":"AuthContextProvider is wrapper over a React Context.Provider. A JSON configuration file must be passed in that contains the application specific AAS server configuration (e.g. clientId, realm). When a user logs in, an AAS Server is instantiated, with the UI application specific configuration overriding the predefined configuration. Once the AAS sever is instantiated, an auth object is created with the needed attributes and APIs. This auth object is available to other React components; since AuthContextProvider is a Provider, its data can be shared with any of the children React components in its tree in a Consumer component (see below). All Consumers that are descendants of a Provider will re-render whenever the AuthContextProviderâ€™s state changes, e.g. a user authorizes. It is recommended to use AuthContextProvider to wrap the entire application so that data can be shared anywhere in application via a Consumer.\nJavascript <AuthContextProvider config={config}>\n  <BrowserRouter>\n    <div>\n      <NavComponent />\n      <Route\n        exact\n        path='/secured'\n        render={_ => (\n          <CheckLogin error={<ExampleError />}>\n            <Write />\n          </CheckLogin>\n        )}\n      />\n      <Route exact path='/public' component={Read} />\n    </div>\n  </BrowserRouter>\n\n  {\n    <RealmRole\n      realmRole='example-admin-role'\n      error={<ExampleError />}>\n      <div>Example admin role specific functionality</div>\n    </RealmRole>\n  }\n  {\n    <ClientRole\n      clientRole='person-role'\n      client='example-server'\n      error={<ExampleError />}>\n      <div>Person role specific functionality</div>\n    </ClientRole>\n  }\n</AuthContextProvider>","title":"AuthContextProvider"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"AuthContextProvider Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#consumer","text":"Consumer is similar to a React Context.Consumer. The shared auth object from the AuthContextProvider can be accessed using a Consumer component\nJavascript <Consumer>\n  {({ auth }) => {\n    return (\n      <div className='nav-wrapper'>\n        {auth && auth.isAuthenticated() ? (\n          <div>\n            Hello, you are logged in\n            <div>Open functionality</div>\n          </div>\n        ) : (\n          <div>\n            Hello, you are not logged in\n            <div>Open functionality</div>\n          </div>\n        )}\n      </div>\n    )\n  }}\n</Consumer>","title":"Consumer"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"Consumer Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#login","text":"The Login component instantiates an AAS server with the configurations provided. It redirects to an AAS server login page for the user to login. After login, the auth object in the context is updated with the appropriate values, e.g. token, realm & client roles etc.\nJavascript <Login />","title":"Login"},{"location":"/aas/csw-aas-js.html#source-code-for-login-component","text":"Login Component","title":"Source code for Login component"},{"location":"/aas/csw-aas-js.html#logout","text":"The Logout component logs out the user from the AAS server. It clears the auth object stored in the context.\nJavascript <Logout />","title":"Logout"},{"location":"/aas/csw-aas-js.html#source-code-for-logout-component","text":"Logout Component","title":"Source code for Logout component"},{"location":"/aas/csw-aas-js.html#checklogin","text":"CheckLogin components provide ability to show something only if the user is logged in. In the following code snippet, Write is a react component that is shown only if the user is logged in. The behavior if the user is not logged in can be defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <CheckLogin error={<ExampleError />}>\n  <Write />\n</CheckLogin>","title":"CheckLogin"},{"location":"/aas/csw-aas-js.html#source-code-for-checklogin-component","text":"CheckLogin Component","title":"Source code for CheckLogin component"},{"location":"/aas/csw-aas-js.html#realmrole","text":"RealmRole components provide the ability to show something only if the user is logged in and has the specified realm role. In the following code snippet, the contents of the div block are shown only if the user is logged in and has the realm role specified in the realmRole prop. Similar to CheckLogin, the behaviour if the user is not logged in can be optionally defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <RealmRole\n  realmRole='example-admin-role'\n  error={<ExampleError />}>\n  <div>Example admin role specific functionality</div>\n</RealmRole>","title":"RealmRole"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"RealmRole Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#clientrole","text":"ClientRole components provide the ability to show something only if the user is logged in and has the specified client role for the specified client. In the following code snippet, the contents of the div block are shown only if the user is logged in and has the client role for specified client in the clientRole prop. Similar to RealmRole, the behaviour if the user is not logged in can be optionally defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <ClientRole\n  clientRole='person-role'\n  client='example-server'\n  error={<ExampleError />}>\n  <div>Person role specific functionality</div>\n</ClientRole>","title":"ClientRole"},{"location":"/aas/csw-aas-js.html#source-code-for-clientrole-component","text":"ClientRole Component","title":"Source code for ClientRole component"}]}