{
  "sequencer-service" : {
    "http-contract" : {
      "endpoints" : [ {
        "requestType" : "LoadSequence",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "StartSequence",
        "responseType" : "SubmitResponse"
      }, {
        "requestType" : "GetSequence",
        "responseType" : "[StepList]"
      }, {
        "requestType" : "Add",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "Prepend",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "Replace",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "InsertAfter",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "Delete",
        "responseType" : "GenericResponse"
      }, {
        "requestType" : "Pause",
        "responseType" : "PauseResponse"
      }, {
        "requestType" : "Resume",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "AddBreakpoint",
        "responseType" : "GenericResponse"
      }, {
        "requestType" : "RemoveBreakpoint",
        "responseType" : "RemoveBreakpointResponse"
      }, {
        "requestType" : "Reset",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "AbortSequence",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "Stop",
        "responseType" : "OkOrUnhandledResponse"
      }, {
        "requestType" : "Submit",
        "responseType" : "SubmitResponse"
      }, {
        "requestType" : "Query",
        "responseType" : "SubmitResponse"
      }, {
        "requestType" : "GoOnline",
        "responseType" : "GoOnlineResponse"
      }, {
        "requestType" : "GoOffline",
        "responseType" : "GoOfflineResponse"
      }, {
        "requestType" : "DiagnosticMode",
        "responseType" : "DiagnosticModeResponse"
      }, {
        "requestType" : "OperationsMode",
        "responseType" : "OperationsModeResponse"
      }, {
        "requestType" : "GetSequenceComponent",
        "responseType" : "AkkaLocation"
      }, {
        "requestType" : "GetSequencerState",
        "responseType" : "SequencerState"
      } ],
      "requests" : {
        "GetSequenceComponent" : [ {
          "_type" : "GetSequenceComponent"
        } ],
        "Prepend" : [ {
          "_type" : "Prepend",
          "commands" : [ {
            "_type" : "Wait",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          } ]
        } ],
        "Replace" : [ {
          "_type" : "Replace",
          "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d",
          "commands" : [ {
            "_type" : "Setup",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Observe",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          } ]
        } ],
        "Add" : [ {
          "_type" : "Add",
          "commands" : [ {
            "_type" : "Setup",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Wait",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Observe",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          } ]
        } ],
        "Submit" : [ {
          "_type" : "Submit",
          "sequence" : [ {
            "_type" : "Setup",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Observe",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Wait",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          } ]
        } ],
        "Query" : [ {
          "_type" : "Query",
          "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
        } ],
        "Delete" : [ {
          "_type" : "Delete",
          "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
        } ],
        "InsertAfter" : [ {
          "_type" : "InsertAfter",
          "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d",
          "commands" : [ {
            "_type" : "Setup",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          } ]
        } ],
        "GetSequencerState" : [ {
          "_type" : "GetSequencerState"
        } ],
        "DiagnosticMode" : [ {
          "_type" : "DiagnosticMode",
          "startTime" : "1970-01-01T00:00:01Z",
          "hint" : "hint"
        } ],
        "OperationsMode" : [ {
          "_type" : "OperationsMode"
        } ],
        "AddBreakpoint" : [ {
          "_type" : "AddBreakpoint",
          "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
        } ],
        "AbortSequence" : [ {
          "_type" : "AbortSequence"
        } ],
        "LoadSequence" : [ {
          "_type" : "LoadSequence",
          "sequence" : [ {
            "_type" : "Setup",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Observe",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          }, {
            "_type" : "Wait",
            "source" : "CSW.ncc.trombone",
            "commandName" : "move",
            "maybeObsId" : "2020A-001-123",
            "paramSet" : [ ]
          } ]
        } ],
        "RemoveBreakpoint" : [ {
          "_type" : "RemoveBreakpoint",
          "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
        } ],
        "GoOnline" : [ {
          "_type" : "GoOnline"
        } ],
        "Reset" : [ {
          "_type" : "Reset"
        } ],
        "Resume" : [ {
          "_type" : "Resume"
        } ],
        "Stop" : [ {
          "_type" : "Stop"
        } ],
        "GoOffline" : [ {
          "_type" : "GoOffline"
        } ],
        "Pause" : [ {
          "_type" : "Pause"
        } ]
      }
    },
    "websocket-contract" : {
      "endpoints" : [ {
        "requestType" : "QueryFinal",
        "responseType" : "SubmitResponse"
      }, {
        "requestType" : "SubscribeSequencerState",
        "responseType" : "SequencerStateResponse"
      } ],
      "requests" : {
        "QueryFinal" : [ {
          "_type" : "QueryFinal",
          "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d",
          "timeout" : 100
        } ],
        "SubscribeSequencerState" : [ {
          "_type" : "SubscribeSequencerState"
        } ]
      }
    },
    "models" : {
      "GenericResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "Unhandled",
        "state" : "offline",
        "messageType" : "StartSequence",
        "msg" : "Sequencer can not accept 'StartSequence' message in 'offline' state"
      }, {
        "_type" : "IdDoesNotExist",
        "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
      }, {
        "_type" : "CannotOperateOnAnInFlightOrFinishedStep"
      } ],
      "PauseResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "Unhandled",
        "state" : "offline",
        "messageType" : "StartSequence",
        "msg" : "Sequencer can not accept 'StartSequence' message in 'offline' state"
      }, {
        "_type" : "CannotOperateOnAnInFlightOrFinishedStep"
      } ],
      "StepList" : [ [ {
        "id" : "df616d7c-3efa-4593-bc72-5312f5c69b01",
        "command" : {
          "_type" : "Setup",
          "source" : "CSW.ncc.trombone",
          "commandName" : "move",
          "maybeObsId" : "2020A-001-123",
          "paramSet" : [ ]
        },
        "status" : {
          "_type" : "Pending"
        },
        "hasBreakpoint" : false
      }, {
        "id" : "cc32f1c9-e2c5-4d6c-bbbc-1347de8aee90",
        "command" : {
          "_type" : "Observe",
          "source" : "CSW.ncc.trombone",
          "commandName" : "move",
          "maybeObsId" : "2020A-001-123",
          "paramSet" : [ ]
        },
        "status" : {
          "_type" : "Pending"
        },
        "hasBreakpoint" : false
      }, {
        "id" : "dc9c5157-dc87-40f4-8fe5-cc7b9d81ded8",
        "command" : {
          "_type" : "Wait",
          "source" : "CSW.ncc.trombone",
          "commandName" : "move",
          "maybeObsId" : "2020A-001-123",
          "paramSet" : [ ]
        },
        "status" : {
          "_type" : "Pending"
        },
        "hasBreakpoint" : false
      } ] ],
      "SequencerState" : [ {
        "_type" : "Idle"
      }, {
        "_type" : "Running"
      }, {
        "_type" : "Offline"
      }, {
        "_type" : "Loaded"
      }, {
        "_type" : "Processing"
      } ],
      "SubmitResponse" : [ {
        "_type" : "Completed",
        "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d",
        "result" : {
          "paramSet" : [ {
            "StringKey" : {
              "keyName" : "StringKey",
              "values" : [ "Str1", "Str2" ],
              "units" : "NoUnits"
            }
          }, {
            "IntKey" : {
              "keyName" : "IntKey",
              "values" : [ 70, 80 ],
              "units" : "NoUnits"
            }
          }, {
            "TAITimeKey" : {
              "keyName" : "TAITimeKey",
              "values" : [ "1970-01-01T00:00:00Z", "2017-09-04T19:00:00.123456789Z" ],
              "units" : "tai"
            }
          }, {
            "FloatKey" : {
              "keyName" : "FloatKey",
              "values" : [ 90, 100 ],
              "units" : "NoUnits"
            }
          }, {
            "ByteArrayKey" : {
              "keyName" : "ByteArrayKey",
              "values" : [ [ 1, 2 ] ],
              "units" : "NoUnits"
            }
          }, {
            "CharKey" : {
              "keyName" : "CharKey",
              "values" : [ "A", "B" ],
              "units" : "NoUnits"
            }
          }, {
            "IntArrayKey" : {
              "keyName" : "IntArrayKey",
              "values" : [ [ 7, 8 ] ],
              "units" : "NoUnits"
            }
          }, {
            "LongKey" : {
              "keyName" : "LongKey",
              "values" : [ 50, 60 ],
              "units" : "NoUnits"
            }
          }, {
            "FloatMatrixKey" : {
              "keyName" : "FloatMatrix",
              "values" : [ [ [ 16, 17 ], [ 18, 19 ] ] ],
              "units" : "NoUnits"
            }
          }, {
            "ChoiceKey" : {
              "keyName" : "ChoiceKey",
              "values" : [ "First", "Second" ],
              "units" : "NoUnits"
            }
          }, {
            "ShortKey" : {
              "keyName" : "ShortKey",
              "values" : [ 30, 40 ],
              "units" : "NoUnits"
            }
          }, {
            "DoubleArrayKey" : {
              "keyName" : "DoubleArrayKey",
              "values" : [ [ 11, 12 ] ],
              "units" : "NoUnits"
            }
          }, {
            "ByteKey" : {
              "keyName" : "ByteKey",
              "values" : [ 10, 20 ],
              "units" : "NoUnits"
            }
          }, {
            "DoubleMatrixKey" : {
              "keyName" : "DoubleMatrix",
              "values" : [ [ [ 20, 21 ], [ 22, 23 ] ] ],
              "units" : "NoUnits"
            }
          }, {
            "ShortMatrixKey" : {
              "keyName" : "ShortMatrix",
              "values" : [ [ [ 4, 5 ], [ 6, 7 ] ] ],
              "units" : "NoUnits"
            }
          }, {
            "BooleanKey" : {
              "keyName" : "BooleanKey",
              "values" : [ true, false ],
              "units" : "NoUnits"
            }
          }, {
            "ByteMatrixKey" : {
              "keyName" : "ByteMatrix",
              "values" : [ [ [ 1, 2 ], [ 3, 4 ] ] ],
              "units" : "NoUnits"
            }
          }, {
            "IntMatrixKey" : {
              "keyName" : "IntMatrix",
              "values" : [ [ [ 12, 13 ], [ 14, 15 ] ] ],
              "units" : "NoUnits"
            }
          }, {
            "DoubleKey" : {
              "keyName" : "DoubleKey",
              "values" : [ 110, 120 ],
              "units" : "NoUnits"
            }
          }, {
            "LongMatrixKey" : {
              "keyName" : "LongMatrix",
              "values" : [ [ [ 8, 9 ], [ 10, 11 ] ] ],
              "units" : "NoUnits"
            }
          }, {
            "LongArrayKey" : {
              "keyName" : "LongArrayKey",
              "values" : [ [ 5, 6 ] ],
              "units" : "NoUnits"
            }
          }, {
            "ShortArrayKey" : {
              "keyName" : "ShortArrayKey",
              "values" : [ [ 3, 4 ] ],
              "units" : "NoUnits"
            }
          }, {
            "UTCTimeKey" : {
              "keyName" : "UTCTimeKey",
              "values" : [ "1970-01-01T00:00:00Z", "2017-09-04T19:00:00.123456789Z" ],
              "units" : "utc"
            }
          }, {
            "CoordKey" : {
              "keyName" : "CoordKey",
              "values" : [ {
                "_type" : "EqCoord",
                "tag" : "BASE",
                "ra" : 659912250000,
                "dec" : -109892300000,
                "frame" : "ICRS",
                "catalogName" : "none",
                "pm" : {
                  "pmx" : 0.5,
                  "pmy" : 2.33
                }
              }, {
                "_type" : "SolarSystemCoord",
                "tag" : "BASE",
                "body" : "Venus"
              }, {
                "_type" : "MinorPlanetCoord",
                "tag" : "GUIDER1",
                "epoch" : 2000,
                "inclination" : 324000000000,
                "longAscendingNode" : 7200000000,
                "argOfPerihelion" : 360000000000,
                "meanDistance" : 1.4,
                "eccentricity" : 0.234,
                "meanAnomaly" : 792000000000
              }, {
                "_type" : "CometCoord",
                "tag" : "BASE",
                "epochOfPerihelion" : 2000,
                "inclination" : 324000000000,
                "longAscendingNode" : 7200000000,
                "argOfPerihelion" : 360000000000,
                "perihelionDistance" : 1.4,
                "eccentricity" : 0.234
              }, {
                "_type" : "AltAzCoord",
                "tag" : "BASE",
                "alt" : 1083600000000,
                "az" : 153000000000
              } ],
              "units" : "NoUnits"
            }
          }, {
            "FloatArrayKey" : {
              "keyName" : "FloatArrayKey",
              "values" : [ [ 9, 10 ] ],
              "units" : "NoUnits"
            }
          } ]
        }
      }, {
        "_type" : "Cancelled",
        "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
      }, {
        "_type" : "Invalid",
        "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d",
        "issue" : {
          "_type" : "OtherIssue",
          "reason" : "issue"
        }
      }, {
        "_type" : "Error",
        "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d",
        "message" : "issue"
      }, {
        "_type" : "Locked",
        "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
      }, {
        "_type" : "Started",
        "runId" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
      } ],
      "AkkaLocation" : [ {
        "_type" : "AkkaLocation",
        "connection" : {
          "prefix" : "CSW.ncc.trombone",
          "componentType" : "Assembly",
          "connectionType" : "akka"
        },
        "uri" : "path",
        "metadata" : {
          "key1" : "value"
        }
      } ],
      "Step" : [ {
        "id" : "82495c00-4839-4dd1-930f-4fc2982e9757",
        "command" : {
          "_type" : "Setup",
          "source" : "CSW.ncc.trombone",
          "commandName" : "move",
          "maybeObsId" : "2020A-001-123",
          "paramSet" : [ ]
        },
        "status" : {
          "_type" : "Pending"
        },
        "hasBreakpoint" : false
      } ],
      "GoOfflineResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "Unhandled",
        "state" : "offline",
        "messageType" : "StartSequence",
        "msg" : "Sequencer can not accept 'StartSequence' message in 'offline' state"
      }, {
        "_type" : "GoOfflineHookFailed"
      } ],
      "GoOnlineResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "Unhandled",
        "state" : "offline",
        "messageType" : "StartSequence",
        "msg" : "Sequencer can not accept 'StartSequence' message in 'offline' state"
      }, {
        "_type" : "GoOnlineHookFailed"
      } ],
      "SequenceCommand" : [ {
        "_type" : "Observe",
        "source" : "CSW.ncc.trombone",
        "commandName" : "move",
        "maybeObsId" : "2020A-001-123",
        "paramSet" : [ ]
      }, {
        "_type" : "Setup",
        "source" : "CSW.ncc.trombone",
        "commandName" : "move",
        "maybeObsId" : "2020A-001-123",
        "paramSet" : [ ]
      }, {
        "_type" : "Wait",
        "source" : "CSW.ncc.trombone",
        "commandName" : "move",
        "maybeObsId" : "2020A-001-123",
        "paramSet" : [ ]
      }, {
        "_type" : "Wait",
        "source" : "CSW.ncc.trombone",
        "commandName" : "move",
        "paramSet" : [ ]
      } ],
      "StepStatus" : [ {
        "_type" : "Pending"
      }, {
        "_type" : "InFlight"
      }, {
        "_type" : "Success"
      }, {
        "_type" : "Failure",
        "message" : "message"
      } ],
      "OperationsModeResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "OperationsHookFailed"
      } ],
      "OkOrUnhandledResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "Unhandled",
        "state" : "offline",
        "messageType" : "StartSequence",
        "msg" : "Sequencer can not accept 'StartSequence' message in 'offline' state"
      } ],
      "DiagnosticModeResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "DiagnosticHookFailed"
      } ],
      "RemoveBreakpointResponse" : [ {
        "_type" : "Ok"
      }, {
        "_type" : "Unhandled",
        "state" : "offline",
        "messageType" : "StartSequence",
        "msg" : "Sequencer can not accept 'StartSequence' message in 'offline' state"
      }, {
        "_type" : "IdDoesNotExist",
        "id" : "d88d0513-ef53-4111-8088-0e29f0edf57d"
      } ]
    },
    "readme" : "# Sequencer service contract\n\nThis page describes possible ways of accessing sequencer service via HTTP/Websocket and sample JSON representation of request body, response body and error body.\n\n## Sequencer service endpoints\n\n### Http endpoint\n\nThe url - `http://{{host}}:{{port}}/post-endpoint` can be used to access sequencer service\n\nFollowing JSON payloads can be \"post\"ed to the above URL:\n\n* LoadSequence\n* Add\n* Prepend\n* Replace\n* InsertAfter\n* Delete\n* AddBreakpoint\n* RemoveBreakpoint\n* DiagnosticMode\n* Submit\n* Query\n* StartSequence\n* GetSequence\n* Reset\n* Pause\n* Resume\n* GetSequenceComponent\n* IsAvailable\n* IsOnline\n* GoOnline\n* GoOffline\n* AbortSequence\n* Stop\n* OperationsMode\n\n### Websocket endpoint\n\nTo execute the following request one can \"send\" it to the url - `ws://{{host}}:{{port}}/websocket-endpoint`.\n\n* QueryFinal\n\n_Note:_\n\nMake sure to replace the `host` and `port` of the running sequencer service on local/remote machine.\n\n## JSON Contract\n\n* Request sample, response types and error types for http endpoint is described in `http-contract.json`\n* Request sample, response types and error types for webservice endpoint is described in `websocket-contract.json`\n* Samples describing how to create requests, possible responses and possible errors can be found in `models.json`\n"
  },
  "gateway-service" : {
    "http-contract" : {
      "endpoints" : [ {
        "requestType" : "ComponentCommand",
        "responseType" : "ValidateResponse",
        "errorTypes" : [ "InvalidComponent" ],
        "description" : "Response type will depend on the command passed to componentCommand request. For all possible request and response type mappings refer to HTTP endpoint documentation of command service in CSW."
      }, {
        "requestType" : "SequencerCommand",
        "responseType" : "OkOrUnhandledResponse",
        "errorTypes" : [ "InvalidComponent" ],
        "description" : "Response type will depend on the command passed to sequencerCommand request. For all possible request and response type mappings refer to HTTP endpoint documentation of sequencer service in ESW."
      }, {
        "requestType" : "PublishEvent",
        "responseType" : "Done",
        "errorTypes" : [ "EventServerUnavailable" ]
      }, {
        "requestType" : "GetEvent",
        "responseType" : "[Event]",
        "errorTypes" : [ "EmptyEventKeys", "EventServerUnavailable" ]
      }, {
        "requestType" : "SetAlarmSeverity",
        "responseType" : "Done",
        "errorTypes" : [ "SetAlarmSeverityFailure" ]
      }, {
        "requestType" : "Log",
        "responseType" : "Done"
      }, {
        "requestType" : "SetLogLevel",
        "responseType" : "Done"
      }, {
        "requestType" : "GetLogMetadata",
        "responseType" : "LogMetadata"
      }, {
        "requestType" : "Shutdown",
        "responseType" : "Done"
      }, {
        "requestType" : "Restart",
        "responseType" : "Done"
      }, {
        "requestType" : "GoOnline",
        "responseType" : "Done"
      }, {
        "requestType" : "GoOffline",
        "responseType" : "Done"
      }, {
        "requestType" : "GetContainerLifecycleState",
        "responseType" : "ContainerLifecycleState"
      }, {
        "requestType" : "GetComponentLifecycleState",
        "responseType" : "SupervisorLifecycleState"
      } ],
      "requests" : {
        "SequencerCommand" : [ {
          "_type" : "SequencerCommand",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          },
          "command" : {
            "_type" : "Prepend",
            "commands" : [ {
              "_type" : "Wait",
              "source" : "CSW.ncc.trombone",
              "commandName" : "move",
              "maybeObsId" : "2020A-001-123",
              "paramSet" : [ ]
            } ]
          }
        } ],
        "Restart" : [ {
          "_type" : "Restart",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          }
        } ],
        "PublishEvent" : [ {
          "_type" : "PublishEvent",
          "event" : {
            "_type" : "ObserveEvent",
            "eventId" : "645fdedd-8d7c-45cf-b0cf-fe60d6f2c55c",
            "source" : "CSW.ncc.trombone",
            "eventName" : "ObserveEvent.ObserveStart",
            "eventTime" : "2021-09-02T13:45:15.348560Z",
            "paramSet" : [ {
              "StringKey" : {
                "keyName" : "obsId",
                "values" : [ "1234A-432-123" ],
                "units" : "NoUnits"
              }
            } ]
          }
        } ],
        "SetLogLevel" : [ {
          "_type" : "SetLogLevel",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          },
          "level" : "ERROR"
        } ],
        "Log" : [ {
          "_type" : "Log",
          "prefix" : "CSW.ncc.trombone",
          "level" : "DEBUG",
          "message" : "message",
          "metadata" : {
            "additional-info" : 45
          }
        } ],
        "GetEvent" : [ {
          "_type" : "GetEvent",
          "eventKeys" : [ {
            "source" : "CSW.ncc.trombone",
            "eventName" : "offline"
          } ]
        } ],
        "GetContainerLifecycleState" : [ {
          "_type" : "GetContainerLifecycleState",
          "prefix" : "CSW.ncc.trombone"
        } ],
        "GetLogMetadata" : [ {
          "_type" : "GetLogMetadata",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          }
        } ],
        "GoOnline" : [ {
          "_type" : "GoOnline",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          }
        } ],
        "GoOffline" : [ {
          "_type" : "GoOffline",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          }
        } ],
        "Shutdown" : [ {
          "_type" : "Shutdown",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          }
        } ],
        "GetComponentLifecycleState" : [ {
          "_type" : "GetComponentLifecycleState",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          }
        } ],
        "SetAlarmSeverity" : [ {
          "_type" : "SetAlarmSeverity",
          "alarmKey" : {
            "prefix" : "CSW.ncc.trombone",
            "name" : "someAlarm"
          },
          "severity" : "Okay"
        } ],
        "ComponentCommand" : [ {
          "_type" : "ComponentCommand",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          },
          "command" : {
            "_type" : "Validate",
            "controlCommand" : {
              "_type" : "Observe",
              "source" : "CSW.ncc.trombone",
              "commandName" : "move",
              "maybeObsId" : "2020A-001-123",
              "paramSet" : [ ]
            }
          }
        } ]
      }
    },
    "websocket-contract" : {
      "endpoints" : [ {
        "requestType" : "ComponentCommand",
        "responseType" : "SubmitResponse",
        "description" : "Response type will depend on the command passed to componentCommand request. For all possible request and response type mappings refer to websocket endpoint documentation of command service in CSW."
      }, {
        "requestType" : "SequencerCommand",
        "responseType" : "SubmitResponse",
        "description" : "Response type will depend on the command passed to sequencerCommand request. For all possible request and response type mappings refer to websocket endpoint documentation of sequencer service in ESW."
      }, {
        "requestType" : "Subscribe",
        "responseType" : "Event",
        "errorTypes" : [ "EmptyEventKeys", "InvalidMaxFrequency" ]
      }, {
        "requestType" : "SubscribeWithPattern",
        "responseType" : "Event",
        "errorTypes" : [ "InvalidMaxFrequency" ]
      } ],
      "requests" : {
        "ComponentCommand" : [ {
          "_type" : "ComponentCommand",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          },
          "command" : {
            "_type" : "QueryFinal",
            "runId" : "27e5c0f6-1bf6-4858-b19d-0dd8f7344293",
            "timeoutInSeconds" : 100
          }
        } ],
        "SequencerCommand" : [ {
          "_type" : "SequencerCommand",
          "componentId" : {
            "prefix" : "CSW.ncc.trombone",
            "componentType" : "HCD"
          },
          "command" : {
            "_type" : "QueryFinal",
            "runId" : "27e5c0f6-1bf6-4858-b19d-0dd8f7344293",
            "timeout" : 100
          }
        } ],
        "Subscribe" : [ {
          "_type" : "Subscribe",
          "eventKeys" : [ {
            "source" : "CSW.ncc.trombone",
            "eventName" : "offline"
          } ],
          "maxFrequency" : 10
        } ],
        "SubscribeWithPattern" : [ {
          "_type" : "SubscribeWithPattern",
          "subsystem" : "CSW",
          "maxFrequency" : 10,
          "pattern" : "[a-b]*"
        } ]
      }
    },
    "models" : {
      "ContainerLifecycleState" : [ "Idle", "Running" ],
      "AlarmSeverity" : [ "Okay", "Warning", "Major", "Indeterminate", "Critical" ],
      "ComponentId" : [ {
        "prefix" : "CSW.ncc.trombone",
        "componentType" : "HCD"
      } ],
      "SupervisorLifecycleState" : [ "Idle", "Running", "RunningOffline", "Restart", "Shutdown", "Lock" ],
      "AlarmKey" : [ {
        "prefix" : "CSW.ncc.trombone",
        "name" : "someAlarm"
      } ],
      "EventKey" : [ {
        "source" : "CSW.ncc.trombone",
        "eventName" : "offline"
      } ],
      "Subsystem" : [ "AOESW", "APS", "CIS", "CLN", "CRYO", "CSW", "DMS", "DPS", "ENC", "ESEN", "ESW", "HNDL", "HQ", "IRIS", "LGSF", "M1COAT", "M1CS", "M1S", "M2COAT", "M2S", "M3S", "MODHIS", "NFIRAOS", "OSS", "REFR", "SCMS", "SER", "SOSS", "STR", "SUM", "TCS", "TINS", "WFOS", "Container" ],
      "Level" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL" ],
      "Event" : [ {
        "_type" : "ObserveEvent",
        "eventId" : "645fdedd-8d7c-45cf-b0cf-fe60d6f2c55c",
        "source" : "CSW.ncc.trombone",
        "eventName" : "ObserveEvent.ObserveStart",
        "eventTime" : "2021-09-02T13:45:15.348560Z",
        "paramSet" : [ {
          "StringKey" : {
            "keyName" : "obsId",
            "values" : [ "1234A-432-123" ],
            "units" : "NoUnits"
          }
        } ]
      }, {
        "_type" : "SystemEvent",
        "eventId" : "76bf4df7-4f6f-4a2e-82b1-008aaea7071c",
        "source" : "CSW.ncc.trombone",
        "eventName" : "offline",
        "eventTime" : "2021-09-02T13:45:15.351244Z",
        "paramSet" : [ ]
      }, {
        "_type" : "ObserveEvent",
        "eventId" : "2cca3871-ba68-48f3-aba0-e15d783d490b",
        "source" : "CSW.ncc.trombone",
        "eventName" : "ObserveEvent.PublishSuccess",
        "eventTime" : "2021-09-02T13:45:15.349091Z",
        "paramSet" : [ ]
      }, {
        "_type" : "ObserveEvent",
        "eventId" : "c4035497-05e0-414f-82bf-59265625ce73",
        "source" : "CSW.ncc.trombone",
        "eventName" : "ObserveEvent.ObserveStart",
        "eventTime" : "2021-09-02T13:45:15.349998Z",
        "paramSet" : [ {
          "StringKey" : {
            "keyName" : "obsId",
            "values" : [ "1234A-432-123" ],
            "units" : "NoUnits"
          }
        } ]
      } ],
      "GatewayException" : [ {
        "_type" : "InvalidComponent",
        "msg" : "invalid component"
      }, {
        "_type" : "EmptyEventKeys"
      }, {
        "_type" : "EventServerUnavailable"
      }, {
        "_type" : "InvalidMaxFrequency"
      }, {
        "_type" : "SetAlarmSeverityFailure",
        "msg" : "alarm fail"
      } ],
      "Prefix" : [ "CSW.ncc.trombone" ],
      "LogMetadata" : [ {
        "defaultLevel" : "INFO",
        "akkaLevel" : "DEBUG",
        "slf4jLevel" : "INFO",
        "componentLevel" : "ERROR"
      } ]
    },
    "readme" : "# Gateway service contract\n\nThis page describes possible ways of accessing gateway service via HTTP/Websocket and sample JSON representation of request body, response body and error body.\n\n## Gateway service endpoints\n\n### Http endpoint\n\nThe url - `http://{{host}}:{{port}}/post-endpoint` can be used to access gateway service\n\nFollowing JSON payloads can be \"post\"ed to the above URL:\n\n* ComponentCommand\n* SequencerCommand\n* PublishEvent\n* GetEvent\n* SetAlarmSeverity\n* Log\n* SetLogLevel\n* GetLogMetadata\n* Shutdown\n* Restart\n* GoOffline\n* GoOnline\n* GetContainerLifecycleState\n* GetComponentLifecycleState\n\n### Websocket endpoint\n\nTo execute the following request one can \"send\" it to the url - `ws://{{host}}:{{port}}/websocket-endpoint`.\n\n* ComponentCommand\n* SequencerCommand\n* Subscribe\n* SubscribeWithPattern\n\n_Note:_\n\nMake sure to replace the `host` and `port` of the running gateway service on local/remote machine.\n\n## JSON Contract\n\n* Request sample, response types and error types for http endpoint is described in `http-contract.json`\n* Request sample, response types and error types for webservice endpoint is described in `websocket-contract.json`\n* Samples describing how to create requests, possible responses and possible errors can be found in `models.json`\n"
  },
  "sequence-manager-service" : {
    "http-contract" : {
      "endpoints" : [ {
        "requestType" : "Configure",
        "responseType" : "ConfigureResponse"
      }, {
        "requestType" : "Provision",
        "responseType" : "ProvisionResponse"
      }, {
        "requestType" : "GetObsModesDetails",
        "responseType" : "ObsModesDetailsResponse"
      }, {
        "requestType" : "StartSequencer",
        "responseType" : "StartSequencerResponse"
      }, {
        "requestType" : "RestartSequencer",
        "responseType" : "RestartSequencerResponse"
      }, {
        "requestType" : "ShutdownSequencer",
        "responseType" : "ShutdownSequencersResponse"
      }, {
        "requestType" : "ShutdownSubsystemSequencers",
        "responseType" : "ShutdownSequencersResponse"
      }, {
        "requestType" : "ShutdownObsModeSequencers",
        "responseType" : "ShutdownSequencersResponse"
      }, {
        "requestType" : "ShutdownAllSequencers",
        "responseType" : "ShutdownSequencersResponse"
      }, {
        "requestType" : "ShutdownSequenceComponent",
        "responseType" : "ShutdownSequenceComponentResponse"
      }, {
        "requestType" : "ShutdownAllSequenceComponents",
        "responseType" : "ShutdownSequenceComponentResponse"
      }, {
        "requestType" : "GetResources",
        "responseType" : "ResourcesStatusResponse"
      } ],
      "requests" : {
        "RestartSequencer" : [ {
          "_type" : "RestartSequencer",
          "subsystem" : "ESW",
          "obsMode" : "DarkNight"
        } ],
        "ShutdownSubsystemSequencers" : [ {
          "_type" : "ShutdownSubsystemSequencers",
          "subsystem" : "ESW"
        } ],
        "StartSequencer" : [ {
          "_type" : "StartSequencer",
          "subsystem" : "ESW",
          "obsMode" : "DarkNight"
        } ],
        "ShutdownObsModeSequencers" : [ {
          "_type" : "ShutdownObsModeSequencers",
          "obsMode" : "DarkNight"
        } ],
        "GetObsModesDetails" : [ {
          "_type" : "GetObsModesDetails"
        } ],
        "ShutdownAllSequenceComponents" : [ {
          "_type" : "ShutdownAllSequenceComponents"
        } ],
        "ShutdownSequenceComponent" : [ {
          "_type" : "ShutdownSequenceComponent",
          "prefix" : "ESW.seq_comp"
        } ],
        "GetResources" : [ {
          "_type" : "GetResources"
        } ],
        "ShutdownSequencer" : [ {
          "_type" : "ShutdownSequencer",
          "subsystem" : "ESW",
          "obsMode" : "DarkNight"
        } ],
        "Provision" : [ {
          "_type" : "Provision",
          "config" : {
            "config" : [ {
              "agentPrefix" : "ESW.agent",
              "countOfSeqComps" : 3
            } ]
          }
        } ],
        "Configure" : [ {
          "_type" : "Configure",
          "obsMode" : "DarkNight"
        } ],
        "ShutdownAllSequencers" : [ {
          "_type" : "ShutdownAllSequencers"
        } ]
      }
    },
    "websocket-contract" : {
      "endpoints" : [ ],
      "requests" : { }
    },
    "models" : {
      "ResourceStatus" : [ {
        "_type" : "InUse"
      }, {
        "_type" : "Available"
      } ],
      "Subsystem" : [ "AOESW", "APS", "CIS", "CLN", "CRYO", "CSW", "DMS", "DPS", "ENC", "ESEN", "ESW", "HNDL", "HQ", "IRIS", "LGSF", "M1COAT", "M1CS", "M1S", "M2COAT", "M2S", "M3S", "MODHIS", "NFIRAOS", "OSS", "REFR", "SCMS", "SER", "SOSS", "STR", "SUM", "TCS", "TINS", "WFOS", "Container" ],
      "ProvisionResponse" : [ {
        "_type" : "Success"
      }, {
        "_type" : "CouldNotFindMachines",
        "prefix" : [ "ESW.agent" ]
      }, {
        "_type" : "SpawningSequenceComponentsFailed",
        "failureResponses" : [ "failed sequence component" ]
      }, {
        "_type" : "Unhandled",
        "state" : "state",
        "messageType" : "messageType",
        "msg" : "Sequence Manager can not accept 'messageType' message in 'state'"
      }, {
        "_type" : "FailedResponse",
        "reason" : "Sequence Manager Operation(Provision) failed due to: Ask timed out after [10000] ms"
      } ],
      "ProvisionConfig" : [ {
        "config" : [ {
          "agentPrefix" : "ESW.agent",
          "countOfSeqComps" : 3
        } ]
      } ],
      "ObsMode" : [ "DarkNight" ],
      "StartSequencerResponse" : [ {
        "_type" : "AlreadyRunning",
        "componentId" : {
          "prefix" : "ESW.DarkNight",
          "componentType" : "Sequencer"
        }
      }, {
        "_type" : "Started",
        "componentId" : {
          "prefix" : "ESW.DarkNight",
          "componentType" : "Sequencer"
        }
      }, {
        "_type" : "LoadScriptError",
        "reason" : "error"
      }, {
        "_type" : "SequenceComponentNotAvailable",
        "subsystems" : [ "ESW" ],
        "msg" : "No sequence components found for subsystems : List(ESW)"
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      }, {
        "_type" : "Unhandled",
        "state" : "state",
        "messageType" : "messageType",
        "msg" : "Sequence Manager can not accept 'messageType' message in 'state'"
      }, {
        "_type" : "FailedResponse",
        "reason" : "Sequence Manager Operation(StartSequencer) failed due to: Ask timed out after [10000] ms"
      } ],
      "Prefix" : [ "ESW.DarkNight" ],
      "ShutdownSequencersResponse" : [ {
        "_type" : "Success"
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      }, {
        "_type" : "Unhandled",
        "state" : "state",
        "messageType" : "messageType",
        "msg" : "Sequence Manager can not accept 'messageType' message in 'state'"
      }, {
        "_type" : "FailedResponse",
        "reason" : "Sequence Manager Operation(ShutdownSequencer) failed due to: Ask timed out after [10000] ms"
      } ],
      "ObsModeStatus" : [ {
        "_type" : "Configurable"
      }, {
        "_type" : "Configured"
      }, {
        "_type" : "NonConfigurable",
        "missingSequenceComponents" : [ ]
      } ],
      "RestartSequencerResponse" : [ {
        "_type" : "Success",
        "componentId" : {
          "prefix" : "ESW.DarkNight",
          "componentType" : "Sequencer"
        }
      }, {
        "_type" : "LoadScriptError",
        "reason" : "error"
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      }, {
        "_type" : "Unhandled",
        "state" : "state",
        "messageType" : "messageType",
        "msg" : "Sequence Manager can not accept 'messageType' message in 'state'"
      }, {
        "_type" : "FailedResponse",
        "reason" : "Sequence Manager Operation(RestartSequencer) failed due to: Ask timed out after [10000] ms"
      } ],
      "ObsModesDetailsResponse" : [ {
        "_type" : "Success",
        "obsModes" : [ {
          "obsMode" : "DarkNight_1",
          "status" : {
            "_type" : "Configured"
          },
          "resources" : [ "ESW", "TCS" ],
          "sequencers" : [ "ESW", "TCS" ]
        }, {
          "obsMode" : "DarkNight_2",
          "status" : {
            "_type" : "Configurable"
          },
          "resources" : [ "ESW", "IRIS" ],
          "sequencers" : [ "ESW" ]
        }, {
          "obsMode" : "DarkNight_3",
          "status" : {
            "_type" : "NonConfigurable",
            "missingSequenceComponents" : [ "IRIS" ]
          },
          "resources" : [ "ESW", "IRIS", "WFOS" ],
          "sequencers" : [ "ESW", "TCS" ]
        } ]
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      } ],
      "ShutdownSequenceComponentResponse" : [ {
        "_type" : "Success"
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      }, {
        "_type" : "Unhandled",
        "state" : "state",
        "messageType" : "messageType",
        "msg" : "Sequence Manager can not accept 'messageType' message in 'state'"
      }, {
        "_type" : "FailedResponse",
        "reason" : "Sequence Manager Operation(ShutdownSequenceComponent) failed due to: Ask timed out after [10000] ms"
      } ],
      "Resource" : [ "IRIS", "TCS" ],
      "ConfigureResponse" : [ {
        "_type" : "Success",
        "masterSequencerComponentId" : {
          "prefix" : "ESW.DarkNight",
          "componentType" : "Sequencer"
        }
      }, {
        "_type" : "ConfigurationMissing",
        "obsMode" : "DarkNight"
      }, {
        "_type" : "ConflictingResourcesWithRunningObsMode",
        "runningObsMode" : [ "DarkNight" ]
      }, {
        "_type" : "FailedToStartSequencers",
        "reasons" : [ "reason" ]
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      }, {
        "_type" : "SequenceComponentNotAvailable",
        "subsystems" : [ "ESW" ],
        "msg" : "No sequence components found for subsystems : List(ESW)"
      }, {
        "_type" : "Unhandled",
        "state" : "state",
        "messageType" : "messageType",
        "msg" : "Sequence Manager can not accept 'messageType' message in 'state'"
      }, {
        "_type" : "FailedResponse",
        "reason" : "Sequence Manager Operation(Configure) failed due to: Ask timed out after [10000] ms"
      } ],
      "ResourcesStatusResponse" : [ {
        "_type" : "Success",
        "resourcesStatus" : [ {
          "resource" : "IRIS",
          "status" : {
            "_type" : "Available"
          }
        }, {
          "resource" : "TCS",
          "status" : {
            "_type" : "InUse"
          },
          "obsMode" : "DarkNight"
        } ]
      }, {
        "_type" : "Failed",
        "msg" : "error"
      } ],
      "ObsModeDetails" : [ {
        "obsMode" : "DarkNight_1",
        "status" : {
          "_type" : "Configured"
        },
        "resources" : [ "ESW", "TCS" ],
        "sequencers" : [ "ESW", "TCS" ]
      } ]
    },
    "readme" : "# Sequence Manager service contract\n\nThis page describes possible ways of accessing sequence manager service via HTTP and sample JSON representation of request body, response body and error body.\n\n## Sequence Manager service endpoints\n\n### Http endpoint\n\nThe url - `http://{{host}}:{{port}}/post-endpoint` can be used to access Sequence Manager service\n\nFollowing JSON payloads can be \"post\"ed to the above URL:\n\n* GetObsModesDetails\n* GetAgentStatus\n* GetResources\n* Configure\n* Provision\n* StartSequencer\n* RestartSequencer\n* ShutdownSequencer\n* ShutdownSubsystemSequencers\n* ShutdownObsModeSequencers\n* ShutdownAllSequencers\n* ShutdownSequenceComponent\n* ShutdownAllSequenceComponents\n\n_Note:_\n\nMake sure to replace the `host` and `port` of the running sequencer service on local/remote machine.\n\n## JSON Contract\n\n* Request sample, response types and error types for http endpoint is described in `http-contract.json`\n* Samples describing how to create requests, possible responses and possible errors can be found in `models.json`\n"
  },
  "agent-service" : {
    "http-contract" : {
      "endpoints" : [ {
        "requestType" : "SpawnSequenceComponent",
        "responseType" : "SpawnResponse"
      }, {
        "requestType" : "SpawnSequenceManager",
        "responseType" : "SpawnResponse"
      }, {
        "requestType" : "KillComponent",
        "responseType" : "KillResponse"
      }, {
        "requestType" : "GetAgentStatus",
        "responseType" : "AgentStatusResponse"
      } ],
      "requests" : {
        "SpawnSequenceComponent" : [ {
          "_type" : "SpawnSequenceComponent",
          "agentPrefix" : "ESW.comp",
          "componentName" : "component_name",
          "version" : [ "1.0.0" ]
        } ],
        "KillComponent" : [ {
          "_type" : "KillComponent",
          "componentId" : {
            "prefix" : "ESW.comp",
            "componentType" : "SequenceComponent"
          }
        } ],
        "SpawnSequenceManager" : [ {
          "_type" : "SpawnSequenceManager",
          "agentPrefix" : "ESW.agent1",
          "obsModeConfigPath" : "/somePath",
          "isConfigLocal" : true,
          "version" : [ "1.0.0" ]
        } ],
        "GetAgentStatus" : [ {
          "_type" : "GetAgentStatus"
        } ]
      }
    },
    "websocket-contract" : {
      "endpoints" : [ ],
      "requests" : { }
    },
    "models" : {
      "SpawnResponse" : [ {
        "_type" : "Spawned"
      }, {
        "_type" : "Failed",
        "msg" : "Spawn failed"
      } ],
      "KillResponse" : [ {
        "_type" : "Killed"
      }, {
        "_type" : "Failed",
        "msg" : "Spawn failed"
      } ],
      "AgentStatusResponse" : [ {
        "_type" : "Success",
        "agentStatus" : [ {
          "agentId" : {
            "prefix" : "ESW.agent1",
            "componentType" : "Machine"
          },
          "seqCompsStatus" : [ {
            "seqCompId" : {
              "prefix" : "ESW.comp",
              "componentType" : "SequenceComponent"
            },
            "sequencerLocation" : [ {
              "_type" : "AkkaLocation",
              "connection" : {
                "prefix" : "ESW.comp",
                "componentType" : "SequenceComponent",
                "connectionType" : "akka"
              },
              "uri" : "uri",
              "metadata" : {
                "key1" : "value"
              }
            } ]
          } ]
        } ],
        "seqCompsWithoutAgent" : [ {
          "seqCompId" : {
            "prefix" : "ESW.comp",
            "componentType" : "SequenceComponent"
          },
          "sequencerLocation" : [ {
            "_type" : "AkkaLocation",
            "connection" : {
              "prefix" : "ESW.comp",
              "componentType" : "SequenceComponent",
              "connectionType" : "akka"
            },
            "uri" : "uri",
            "metadata" : {
              "key1" : "value"
            }
          } ]
        } ]
      }, {
        "_type" : "LocationServiceError",
        "reason" : "location service error"
      } ]
    },
    "readme" : "# Agent service contract\n\nThis page describes possible ways of accessing agent service via HTTP/Websocket and sample JSON representation of request body, response body and error body.\n\n## Agent service endpoints\n\n### Http endpoint\n\nThe url - `http://{{host}}:{{port}}/post-endpoint` can be used to access sequencer service\n\nFollowing JSON payloads can be \"post\"ed to the above URL:\n\n* spawnSequenceManager\n* spawnSequenceComponent\n* killComponent\n\n_Note:_\n\nMake sure to replace the `host` and `port` of the running sequencer service on local/remote machine.\n\n## JSON Contract\n\n* Request sample, response types and error types for http endpoint is described in `http-contract.json`\n* Request sample, response types and error types for webservice endpoint is described in `websocket-contract.json`\n* Samples describing how to create requests, possible responses and possible errors can be found in `models.json`\n"
  }
}