{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"TMT Executive Software (ESW)"},{"location":"/index.html#tmt-executive-software-esw-","text":"","title":"TMT Executive Software (ESW)"},{"location":"/sequencer/server/sequencer-server.html","text":"","title":"Sequencer HTTP Server"},{"location":"/sequencer/server/sequencer-server.html#sequencer-http-server","text":"When sequencer is started on a machine, it also starts embedded http server on random free port. This embedded sequencer server is registered with location service so that it can be discovered and used to communicate with sequencer component. sequencer-http-server exposes http endpoints of SequencerCommandService which enables to submit sequence to sequencer and query for response. It also exposes other endpoints (SequencerApi) which allows editing sequence, pause/resume sequence, sequencer lifecycle endpoints etc. sequencer-http-server http interface is explained in detail in Routes section.","title":"Sequencer HTTP Server"},{"location":"/sequencer/server/sequencer-server.html#prerequisite","text":"It requires csw-location-server running on a machine. The csw-services.sh script does this for you. This application will start a HTTP CSW Location Server on port 7654 which is required for all Location Service consumers who uses HTTP Location client. All components (HCD’s, Assemblies, Services, Sequencer, sequencer-http-server etc.) use a local HTTP Location client which expects the Location Server running at localhost:7654. In a production environment, it is required that all machines running components should have the HTTP Location Server running locally.","title":"Prerequisite"},{"location":"/sequencer/server/sequencer-server.html#starting-sequencer-http-server","text":"When sequencer app is started, it starts sequencer server and registers it with location server. Sequencer is registered as akka as well as http location. For example, sequencer with subsystem iris and observing mode darknight is registered with iris.darknight (.) prefix.","title":"Starting sequencer-http-server"},{"location":"/sequencer/server/sequencer-server.html#http-endpoints","text":"Note Please replace port in following examples with appropriate sequencer-server port. e.g. - POST http://localhost:<your-port>/post-endpoint Please use appropriate id in respective APIs. e.g. - delete, addBreakpoint etc.","title":"http endpoints"},{"location":"/sequencer/server/sequencer-server.html#sequencer-command-service","text":"This allows submitting sequence to sequencer and query for response","title":"Sequencer command service"},{"location":"/sequencer/server/sequencer-server.html#submit","text":"This endpoint allows submitting sequence to sequencer. Sequencer will start executing sequence. This api gives SubmitResponse future as response. Submit won’t wait for final response. It will give started response saying sequence is submitted successfully and started.\nSubmit POST http://localhost:57542/post-endpoint\nContent-Type: application/json\n\n{\n  \"Submit\": [\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-1\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    },\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-2\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    }\n  ]\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 06:36:10 GMT\nContent-Type: application/json\nContent-Length: 60\n\n{\n  \"Started\": {\n    \"runId\": \"eee70d8c-8edb-4858-8994-5fe0357d3a90\"\n  }\n}\n\n###","title":"Submit"},{"location":"/sequencer/server/sequencer-server.html#re-submit-sequence-when-previous-sequence-is-in-progress","text":"Re-Submit POST http://localhost:57542/post-endpoint\nContent-Type: application/json\n\n{\n  \"Submit\": [\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-1\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    },\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-2\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    }\n  ]\n}\n\n### 200 OK with Domain error HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 06:44:23 GMT\nContent-Type: application/json\nContent-Length: 174\n\n{\n  \"Invalid\": {\n    \"runId\": \"IdNotAvailable\",\n    \"issue\": {\n      \"UnsupportedCommandInStateIssue\": \"Sequencer can not accept 'SubmitSequenceInternal' message in 'InProgress' state\"\n    }\n  }\n}\n\n###","title":"Re-Submit sequence when previous sequence is in progress"},{"location":"/sequencer/server/sequencer-server.html#malformed-request","text":"Malformed request for submit POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Submit\": [\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-1\",\n        \"paramSet\": []\n      }\n    },\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-2\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    }\n  ]\n}\n\n### 400 Bad Request HTTP/1.1 400 Bad Request\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 06:48:15 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 122\n\nThe request content was malformed:\nCannot decode `Setup` instance due to missing map key \"maybeObsId\" (input position 164)\n\n###","title":"Malformed Request"},{"location":"/sequencer/server/sequencer-server.html#query","text":"This endpoint allows querying for sequence response. Query response can be intermediate response or final response.\nQuery POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Query\": \"6ed2bf72-d7a3-498f-85e4-b3719727d18c\"\n}\n\n### 200 OK [Started Response] HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 07:12:34 GMT\nContent-Type: application/json\nContent-Length: 60\n\n{\n  \"Started\": \"16c7e800-4bd7-4390-acf2-868efbbb0819\"\n}\n\n### 200 OK [Completed Response] HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 07:13:21 GMT\nContent-Type: application/json\nContent-Length: 62\n\n{\n  \"Completed\": {\n    \"runId\": \"16c7e800-4bd7-4390-acf2-868efbbb0819\"\n  }\n}\n\n\n###","title":"Query"},{"location":"/sequencer/server/sequencer-server.html#queryfinal","text":"This endpoint allows querying for final response of sequence.\nQueryFinal (Websocket)\nws://localhost:57236/websocket-endpoint\n\n{\"QueryFinal\":{\"runId\":\"IdNotAvailable\",\"timeout\":10}}\nResponses\nStarted :\n{\n  \"Started\": {\n    \"runId\": \"6ed2bf72-d7a3-498f-85e4-b3719727d18c\"\n  }\n}\nCompleted:\n{\n  \"Completed\": {\n    \"runId\": \"6ed2bf72-d7a3-498f-85e4-b3719727d18c\"\n  }\n}\nNote One can use websocket plugin for IntelliJ or chrome extension for QueryFinal functionality","title":"QueryFinal"},{"location":"/sequencer/server/sequencer-server.html#sequencer-editor-apis","text":"This exposes APIs to edit sequence, get status of sequence","title":"Sequencer editor APIs"},{"location":"/sequencer/server/sequencer-server.html#loadsequence","text":"This api loads sequence in a sequencer. Sequencer will be in Loaded state. Sequencer will wait for StartSequence command to start execution.\nLoadSequence POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"LoadSequence\": [\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-1\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    },\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-2\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    }\n  ]\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:22:58 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"loadSequence"},{"location":"/sequencer/server/sequencer-server.html#startsequence","text":"This api starts loaded sequence in a sequencer. This gives Started as response. Api returns Unhandled Response is sequence is not loaded.\nStartSequence POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"StartSequence\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:23:28 GMT\nContent-Type: application/json\nContent-Length: 60\n\n{\n  \"Started\": \"16c7e800-4bd7-4390-acf2-868efbbb0819\"\n}\n\n###","title":"startSequence"},{"location":"/sequencer/server/sequencer-server.html#getsequence","text":"This api allows getting state of sequence submitted.\nGetSequence POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"GetSequence\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:23:49 GMT\nContent-Type: application/json\nContent-Length: 216\n\n[\n  [\n    {\n      \"id\": \"5995b121-b10c-4cd6-ae3a-97bd31456c1b\",\n      \"command\": {\n        \"Setup\": {\n          \"source\": \"esw.test\",\n          \"commandName\": \"command-1\",\n          \"maybeObsId\": [],\n          \"paramSet\": []\n        }\n      },\n      \"status\": {\n        \"Success\": {}\n      },\n      \"hasBreakpoint\": false\n    },\n    {\n      \"id\": \"606b366d-17d1-4c78-8902-7a25f37ac8c8\",\n      \"command\": {\n        \"Setup\": {\n          \"source\": \"esw.test\",\n          \"commandName\": \"command-2\",\n          \"maybeObsId\": [],\n          \"paramSet\": []\n        }\n      },\n      \"status\": {\n        \"Success\": {}\n      },\n      \"hasBreakpoint\": false\n    }\n  ]\n]\n\n###","title":"getSequence"},{"location":"/sequencer/server/sequencer-server.html#add","text":"This api allows adding more commands to running sequence. These commands will be added at the end of sequence.\nAdd POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Add\": [\n    {\n      \"Setup\": {\n        \"source\": \"esw.test\",\n        \"commandName\": \"command-2\",\n        \"maybeObsId\": [],\n        \"paramSet\": []\n      }\n    }\n  ]\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:24:50 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"add"},{"location":"/sequencer/server/sequencer-server.html#prepend","text":"This api allows adding more commands to running sequence. These commands will be prepended to all pending commands of sequence.\nPrepend POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Prepend\": [\n    {\n      \"Setup\": {\n        \"source\": \"esw.darknight\",\n        \"commandName\": \"command-3\",\n        \"maybeObsId\": [\n          \"obsId1\"\n        ],\n        \"paramSet\": []\n      }\n    }\n  ]\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"prepend"},{"location":"/sequencer/server/sequencer-server.html#replace","text":"This api allows replacing command with given id with list of commands. This api will return error response if provided id does not exist or command to be replaces is finished or in progress.\nReplace POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Replace\": {\n    \"id\": \"0b7a4271-7cea-46e2-b162-37118c1b1499\",\n    \"commands\": [\n      {\n        \"Setup\": {\n          \"source\": \"esw.darknight\",\n          \"commandName\": \"command-2\",\n          \"maybeObsId\": [\n            \"obsId1\"\n          ],\n          \"paramSet\": []\n        }\n      }\n    ]\n  }\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"replace"},{"location":"/sequencer/server/sequencer-server.html#insertafter","text":"This api allows adding more commands to sequence after command with provided run id. This api return error is a provided id does not exist or sequence execution has gone ahead of provided id.\nInsertAfter POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"InsertAfter\": {\n    \"id\": \"3496109d-8b00-4cf7-aa06-31a19702fea1\",\n    \"commands\": [\n      {\n        \"Setup\": {\n          \"source\": \"esw.darknight\",\n          \"commandName\": \"command-4\",\n          \"maybeObsId\": [\n            \"obsId1\"\n          ],\n          \"paramSet\": []\n        }\n      }\n    ]\n  }\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"insertAfter"},{"location":"/sequencer/server/sequencer-server.html#delete","text":"This api allows deleting command with provided id.\nDelete POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Delete\": {\n    \"id\": \"dc731e1e-20af-4edd-b5b1-530ead12792e\"\n  }\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"delete"},{"location":"/sequencer/server/sequencer-server.html#addbreakpoint","text":"This api allows putting breakpoint at command with provided id. Sequence execution will pause where breakpoint is applied.\nAddBreakpoint POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"AddBreakpoint\": {\n    \"id\": \"88b1b3ad-36ed-4be0-837c-0f93cb3a0e1f\"\n  }\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"addBreakpoint"},{"location":"/sequencer/server/sequencer-server.html#removebreakpoint","text":"This api allows removing breakpoint from command with provided id.\nRemoveBreakpoint POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"RemoveBreakpoint\": {\n    \"id\": \"cf8962ae-b877-4413-9e48-f9b168793aa1\"\n  }\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"removeBreakpoint"},{"location":"/sequencer/server/sequencer-server.html#reset","text":"This api allows to remove all pending commands from sequence.\nReset POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Reset\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"reset"},{"location":"/sequencer/server/sequencer-server.html#pause","text":"This api allows pausing sequence. Command which is currently in progress will execute but sequence execution will not proceed.\nPause POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Pause\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"pause"},{"location":"/sequencer/server/sequencer-server.html#resume","text":"This api allows resuming sequence from paused point.\nResume POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Resume\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:25:23 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"resume"},{"location":"/sequencer/server/sequencer-server.html#getsequencecomponent","text":"This api allows getting location of sequence component where sequencer is running.\nGetSequenceComponent POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"GetSequenceComponent\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:29:29 GMT\nContent-Type: application/json\nContent-Length: 191\n\n{\n  \"AkkaLocation\": {\n    \"connection\": {\n      \"prefix\": \"esw.primary\",\n      \"componentType\": \"sequence_component\",\n      \"connectionType\": \"akka\"\n    },\n    \"uri\": \"akka://esw-system@10.131.20.138:58492/user/esw.primary#-1731655948\"\n  }\n}\n\n###","title":"getSequenceComponent"},{"location":"/sequencer/server/sequencer-server.html#isavailable","text":"This api allows checking whether sequencer is executing any sequence. It return true if any sequence is in execution else false.\nIsAvailable POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"IsAvailable\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:30:01 GMT\nContent-Type: application/json\nContent-Length: 5\n\nfalse\n\n###","title":"isAvailable"},{"location":"/sequencer/server/sequencer-server.html#sequencer-lifecycle-apis","text":"This exposes endpoints for sequencer lifecycle APIs e.g - goOffline, diagnostic mode, abortSequence etc.","title":"Sequencer lifecycle APIs"},{"location":"/sequencer/server/sequencer-server.html#isonline","text":"This api allows checking whether sequencer is online.\nIsOnline POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"IsOnline\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 09:30:23 GMT\nContent-Type: application/json\nContent-Length: 4\n\ntrue\n\n###","title":"isOnline"},{"location":"/sequencer/server/sequencer-server.html#abortsequence","text":"This api allows aborting sequence by removing all pending commands and executes abort handler written in sequencer script.\nAbortSequence POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"AbortSequence\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 10:13:31 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"abortSequence"},{"location":"/sequencer/server/sequencer-server.html#stop","text":"This api allows stopping sequence by removing all pending commands and executes stop handler written in sequencer script.\nStop POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"Stop\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 10:06:29 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"stop"},{"location":"/sequencer/server/sequencer-server.html#goonline","text":"This api allows setting sequencer in an online mode.\nGoOnline POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"GoOnline\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 10:17:21 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"goOnline"},{"location":"/sequencer/server/sequencer-server.html#gooffline","text":"This api allows setting sequencer in an offline mode.\nGoOffline POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"GoOffline\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 10:16:57 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"goOffline"},{"location":"/sequencer/server/sequencer-server.html#diagnosticmode","text":"This api executes a diagnostic handler from script\nDiagnosticMode POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"DiagnosticMode\": {\n    \"startTime\": \"2020-01-03T10:12:28.915946Z\",\n    \"hint\": \"engineering\"\n  }\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 10:06:29 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###","title":"diagnosticMode"},{"location":"/sequencer/server/sequencer-server.html#operationsmode","text":"This api executes operations mode handler from script\nOperationsMode POST http://localhost:57236/post-endpoint\nContent-Type: application/json\n\n{\n  \"OperationsMode\": {}\n}\n\n### 200 OK HTTP/1.1 200 OK\nServer: akka-http/10.1.11\nDate: Thu, 02 Jan 2020 10:06:29 GMT\nContent-Type: application/json\nContent-Length: 9\n\n{\n  \"Ok\": {}\n}\n\n###\nNote All the requests to sequencer server can result in 400 Bad Request or 500 Internal Server error","title":"operationsMode"},{"location":"/sequencer/server/sequencer-server.html#source-code-for-examples","text":"sequencer-embedded-server.http\nNote The sequencer-embedded-server.http has first class support to execute http requests directly from IDEs like IntelliJ IDEA provided sequencer is already running and all pre-requisites are met.","title":"Source code for examples"},{"location":"/sequencer/scripts/scripts.html","text":"","title":"Sequencer Script"},{"location":"/sequencer/scripts/scripts.html#sequencer-script","text":"FSM High Level DSL","title":"Sequencer Script"},{"location":"/sequencer/scripts/fsm.html","text":"","title":"FSM"},{"location":"/sequencer/scripts/fsm.html#fsm","text":"Scripts have ability to define and run Finite State Machine(FSM). FSM can transition between defined states and can be made reactive to events and commands.","title":"FSM"},{"location":"/sequencer/scripts/fsm.html#define-fsm","text":"","title":"Define FSM"},{"location":"/sequencer/scripts/fsm.html#create-fsm","text":"To create an instance of FSM, a helper method Fsm is provided as shown in example. This method takes following parameters:\nname of FSM initial state of the FSM block having states of the FSM\nKotlin val irisFsm = Fsm(name = \"iris-fsm\", initState = \"INIT\") {\n    // place to define all states of FSM\n}","title":"Create FSM"},{"location":"/sequencer/scripts/fsm.html#define-state","text":"As mentioned above, the third parameter of Fsm method is a block which is the place to define all the states of FSM. A method named state needs to be called with parameters name of the state and the block of actions to be performed in that state. In case of multiple states with same name, the last one will be considered.\nNote State names are case-insensitive.\nKotlin state(\"INIT\") {\n    // actions to be performed in this state\n}","title":"Define state"},{"location":"/sequencer/scripts/fsm.html#state-transition","text":"To transit between states, become method needs to be called with name of next state. This will change the state of the fsm to the given state and start executing next state. InvalidStateException will be thrown if provided state is not defined.\nKotlin become(state = \"IN-PROGRESS\")\nState transition should ideally be the last call in state or should be done with proper control flow so that become is not called multiple times.","title":"State transition"},{"location":"/sequencer/scripts/fsm.html#complete-fsm","text":"completeFsm marks the completion of Fsm. Calling it will immediately stop execution of the FSM and next steps will be ignored, so it should be called at the end of the state.\nKotlin completeFsm()   // will complete the Fsm\n// anything after this will not be executed","title":"Complete FSM"},{"location":"/sequencer/scripts/fsm.html#helper-constructs","text":"entry : executes the given block only when state transition happens from a different state Kotlin entry {\n    // do something\n} on : executes the given block if given condition is true Kotlin on(condition) {\n    // executes this when condition is true\n} after : executes the given block after the given duration Kotlin after(100.milliseconds) {\n    // do something\n}","title":"Helper constructs"},{"location":"/sequencer/scripts/fsm.html#start-fsm","text":"After creating instance of FSM, it needs to be explicitly started by calling start on it. This will start executing the initial state of fsm which is provided while creating instance of it.\nKotlin irisFsm.start()","title":"Start FSM"},{"location":"/sequencer/scripts/fsm.html#wait-for-completion","text":"As FSM has ability to be complete itself, await can be called to wait for its completion. Control flow will be stopped at the await statement till the FSM is marked complete.\nKotlin irisFsm.await()","title":"Wait for completion"},{"location":"/sequencer/scripts/fsm.html#reactive-fsm","text":"FSM can be made to react to changes in event and command parameters with help of Event variables and Command flags.","title":"Reactive FSM"},{"location":"/sequencer/scripts/fsm.html#event-variable","text":"Event variables are the way to make fsm react to events. Event variable can be tied to only one parameter key in an event. To make FSM react to event variable, we need to create a EventVariable for a specific parameter key of an event and bind the fsm to it.\nWhenever any event is published on the key of given event, all the FSMs bound to that variable will be re-evaluated. Event variables use EventService underneath, which makes it possible to share data between multiple sequencers.\nEvent variables are of 2 types:\nSystemVar - for System events ObserveVar - for Observe events\nFSM can be bind to multiple event vars and vise versa. Following examples shows how to create event variables, bind FSM to it and methods like get and set. set will publish the event with modified parameter.\nKotlin //**  System Var **//\nval tempKey = intKey(\"temperature\")\nval systemVar = SystemVar(0, \"esw.temperature.temp\", tempKey)\n\nsystemVar.bind(irisFsm) // binds the FSM and event variable\n\n//**  Observe Var **//\nval coordKey = coordKey(\"co-ordinates\")\nval observeVar = ObserveVar(JEqCoord.make(0, 0), \"iris.observe.coord\", coordKey)\nobserveVar.get() // returns the value of the parameter from the latest event\n\nobserveVar.bind(irisFsm) // binds the FSM and event variable\n\nobserveVar.set(JEqCoord.make(1, 1)) // publishes the given value on event key","title":"Event variable"},{"location":"/sequencer/scripts/fsm.html#commandflag","text":"Command flag acts as bridge which can used to pass Parameters to FSM from outside. Setting the params in command flag will re-evaluate the all the FSMs with provided params which are bound to that flag. It is possible to bind one FSM to multiple command flags and vise versa. Command flag is limited to scope of a single script. It does not have any remote impact.\nExample shows how to create CommandFlag, bind FSM to it and methods get and set which are provided to retrieve or set the value of params in command flag.\nKotlin val flag = CommandFlag()\nflag.value() // way to extract the current params value\n\nflag.bind(irisFsm) // bind the FSM and command flag\n\nflag.set(params) // refreshes the bound FSMs with the new params","title":"CommandFlag"},{"location":"/sequencer/scripts/fsm.html#example-fsm","text":"In the below example, temparatureFsm demonstrates how FSM can be defined and used in the scripts. The event variable is declared with event key esw.temperature.temp for param temperature and temparatureFsm is bind to it. The job of the temparatureFsm is to decide the state based on the temperature and publish it on event key esw.temperatureFsm with param key state.\nLogic of state change is:\ncondition state temp == 30 FINISH temp > 40 ERROR else OK\nKotlin val tempKey = longKey(\"temperature\")\nval stateKey = stringKey(\"state\")\n\nval tempFsmEvent = SystemEvent(\"esw.temperatureFsm\", \"state\")\nsuspend fun publishState(baseEvent: SystemEvent, state: String) = publishEvent(baseEvent.add(stateKey.set(state)))\n\n// temperature Fsm states\nval OK = \"OK\"\nval ERROR = \"ERROR\"\nval FINISHED = \"FINISHED\"\n\nval temperatureVar = SystemVar(0, \"esw.temperature.temp\", tempKey)\n\nval temperatureFsm = Fsm(\"TEMP\", OK) {\n    var fsmVariable = 10                    // [[ 01 ]]\n\n    state(OK) {\n        // [[ 02 ]]\n\n        entry {\n            publishState(tempFsmEvent, OK)\n        }\n        on(temperatureVar.get() == 30L) {\n            become(FINISHED)             // [[ 03 ]]\n        }\n        on(temperatureVar.get() > 40) {\n            become(ERROR)\n        }\n    }\n\n    state(ERROR) {\n        entry {\n            publishState(tempFsmEvent, ERROR)\n        }\n        on(temperatureVar.get() < 40) {\n            become(OK)\n        }\n    }\n\n    state(FINISHED) {\n        completeFsm()                   // [[ 04 ]]\n    }\n}\n\ntemperatureVar.bind(temperatureFsm)     // [[ 05 ]]\n\nonSetup(\"command-1\") {\n    temperatureFsm.start()              // [[ 06 ]]\n}\n\nonSetup(\"command-2\") {\n    temperatureFsm.await()              // [[ 07 ]]\n}\nKey things (which are marked with // [[ * ]]) in above example code are :\nThe top-level scope of the FSM which can used to declare variables in FSM’s scope and statements which should be executed while starting the FSM. Statements written here will be executed only once when the FSM starts. The scope of the state. Code written here will be executed on every refresh of the state, so this is not ideal place to declare variables. State transition from OK state to ERROR Marks the FSM complete. Re-evaluation or state transitions cannot happen after this is executed. Till this point, it’s all about defining the blue-print of the FSM like states, state transitions and actions to perform in specific states, there is no execution yet. Only the FSM top-level statements are evaluated written at // [[ 1 ]]. Shows the binding of temperatureVar and temperatureFsm. After this point, FSM will re-evaluate whenever events are published on temperatureVar. Starts evaluating the initial state of the FSM Waits for completion of the FSM. In example, the script execution will be blocked till line // [[ 4 ]] is executed which will mark the FSM complete and script execution will continue after that.\nExample code also demos the use of the helper methods like entry, on.","title":"Example FSM"},{"location":"/sequencer/scripts/dsl/dsl.html","text":"","title":"High Level DSL"},{"location":"/sequencer/scripts/dsl/dsl.html#high-level-dsl","text":"Time Service Dsl Loop","title":"High Level DSL"},{"location":"/sequencer/scripts/dsl/services/time-service.html","text":"","title":"Time Service Dsl"},{"location":"/sequencer/scripts/dsl/services/time-service.html#time-service-dsl","text":"Time Service Dsl is dsl wrapper over time service module provided by csw. This dsl exposes following APIs to script writers to schedule tasks at given time. It also exposes utility methods for getting specified utc time or tai time and calculate offset.","title":"Time Service Dsl"},{"location":"/sequencer/scripts/dsl/services/time-service.html#utctimenow","text":"This utility provides current utc time.\nKotlin val currentUtcTime = utcTimeNow()","title":"utcTimeNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#taitimenow","text":"This utility provides current utc time.\nKotlin val currentTaiTime = taiTimeNow()","title":"taiTimeNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#utctimeafter","text":"This utility provides utc time after provided duration. Following example shows how to get utc time after 1 hour\nKotlin val utcTime = utcTimeAfter(1.hours)","title":"utcTimeAfter"},{"location":"/sequencer/scripts/dsl/services/time-service.html#taitimeafter","text":"This utility provides tai time after provided duration. Following example shows how to get tai time after 1 hour\nKotlin val taiTime = taiTimeAfter(1.hours)","title":"taiTimeAfter"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleonce","text":"This API allows to schedule non periodic task in script at specified utc time or tai time. This a handle to cancel the execution of the task if it hasn’t been executed already\nKotlin scheduleOnce(taiTimeNow()) {\n    publishEvent(SystemEvent(\"lgsf\", \"publish.success\"))\n}","title":"scheduleOnce"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleoncefromnow","text":"This API allows to schedule non periodic task in script after specified duration. This API takes time duration after which task will be scheduled. scheduleOnceFromNow internally creates instance of utc time considering specified in duration. Following example shows scheduling task after 1 hour from current utc time. This a handle to cancel the execution of the task if it hasn’t been executed already.\nKotlin scheduleOnceFromNow(1.hours) {\n    publishEvent(SystemEvent(\"lgsf\", \"publish.success\"))\n}","title":"scheduleOnceFromNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleperiodically","text":"This API allows to schedules a task to execute periodically at the given interval. The task is executed once at the given start time followed by execution of task at each interval. This returns a handle to cancel the execution of further tasks.\nKotlin schedulePeriodically(utcTimeNow(), 5.seconds) {\n    publishEvent(SystemEvent(\"lgsf\", \"publish.success\"))\n}","title":"schedulePeriodically"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleperiodicallyfromnow","text":"This API allows to schedules a task to execute periodically at the given interval. This API takes time duration after which task will be scheduled once followed by execution of task at each interval. Following example shows scheduling task after 1 hour from current utc time and then executing it periodically at 10 seconds interval. This returns a handle to cancel the execution of further tasks.\nKotlin schedulePeriodicallyFromNow(1.hours, 10.seconds) {\n    publishEvent(SystemEvent(\"lgsf\", \"publish.success\"))\n}","title":"schedulePeriodicallyFromNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#source-code-for-above-examples","text":"Time Service Example Script","title":"Source code for above examples"},{"location":"/sequencer/scripts/dsl/loop.html","text":"","title":"Loop"},{"location":"/sequencer/scripts/dsl/loop.html#loop","text":"Script supports following multiple variations of loop Dsl to satisfy different use cases:\nloop waitFor bgLoop","title":"Loop"},{"location":"/sequencer/scripts/dsl/loop.html#loop","text":"With default loop interval\nloop DSL allows you to start loop synchronously which means rest of the code written after loop will not be executed until stopWhen condition written inside loop becomes true. You can use this DSL when you want to iteratively perform some actions until certain condition becomes true. loop without providing any minimum interval uses default interval of 50 milliseconds. Default loopIntervalis used to reduce cpu contention.\nFollowing example demonstrate the usage of loop dsl without providing custom loop interval. In the loop body, motor is being moved by 10 degrees in every iteration of the loop. Loop will be terminated when motor’s current position reaches to expected position which is 100 degrees in this case.\nKotlin val expectedMotorPosition = 100\n\n// move motor by 10 degrees in each iteration, default loop interval is 50 millis\n// stop loop when current motor position matches expected motor position and continue with the execution of rest of the handler\nloop {\n    moveMotor(10)\n    stopWhen(motorPosition == expectedMotorPosition)\n}\nWith custom minimum loop interval\nloop DSL allows you to provide minimum loop interval and starts loop synchronously. Every iteration of loop will at least wait for minimum provided interval before executing next iteration.\nFollowing example demonstrate the usage of loop dsl by providing custom loop interval.\nKotlin // move motor by 20 degrees in every iteration after a loop interval of 100 millis (custom loop interval used here)\n// stop loop when current motor position matches expected motor position and continue with the execution of rest of the handler\nloop(100.milliseconds) {\n    moveMotor(20)\n    stopWhen(motorPosition == expectedMotorPosition)\n}\nNote minInterval needs to be greater than default interval of 50 milliseconds otherwise it will be ignored and default loop interval will be used.","title":"loop"},{"location":"/sequencer/scripts/dsl/loop.html#waitfor","text":"This is a specialized version of loop and satisfies simple use cases where you want to semantically block the execution until certain condition becomes true.\nIn the following example, initializeMotor method will start the initialization and eventually set motorUp flag to true indicating motor is successfully initialized. waitFor { motorUp } will check the value of motorUp flag every 50 milliseconds and if it is true then rest of the code execution will continue.\nKotlin // start initializing motor and this method will set motorUp flag to true once initialization is successful\ninitializeMotor()\n// pauses the init-motor command handlers execution until motor becomes up\nwaitFor { motorUp }","title":"waitFor"},{"location":"/sequencer/scripts/dsl/loop.html#bgloop","text":"With default loop interval\nbgLoop DSL allows you to start loop asynchronously in the background which means rest of the code written after bgLoop will be executed concurrently. bgLoop will be terminated when stopWhen condition written inside loop becomes true.\nYou can use this DSL when you want to iteratively perform some actions in the background. bgLoop without providing any minimum interval uses default interval of 50 milliseconds.\nFollowing example demonstrate the usage of bgLoop dsl without providing custom loop interval. In the loop body, current temperature is published every 50 milliseconds. BgLoop will be terminated when stopPublishingTemperature flag becomes true and this is set to true in onStop handler.\nKotlin // start background loop which publishes current temperature of motor every 50 milliseconds (default loop interval)\nbgLoop {\n    val currentTemp = getCurrentTemp()\n    publishEvent(temperatureEvent.add(temperatureKey.set(currentTemp)))\n    stopWhen(stopPublishingTemperature)\n}\nWith custom loop interval\nbgLoop DSL allows you to provide minimum loop interval and start loop asynchronously. Every iteration of bgLoop will at least wait for minimum provided interval before executing next iteration.\nFollowing example demonstrate the usage of bgLoop dsl by providing custom loop interval.\nKotlin // start background loop which publishes current temperature of motor every 100 milliseconds\nbgLoop(100.milliseconds) {\n    val currentTemp = getCurrentTemp()\n    publishEvent(temperatureEvent.add(temperatureKey.set(currentTemp)))\n    stopWhen(stopPublishingTemperature)\n}","title":"bgLoop"},{"location":"/sequencer/scripts/dsl/loop.html#source-code-for-examples","text":"Loop Examples","title":"Source code for examples"}]}