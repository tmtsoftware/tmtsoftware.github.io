{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"TMT Executive Software (ESW)"},{"location":"/index.html#tmt-executive-software-esw-","text":"Executive Software (ESW) is a reimplementation/refactoring of the prototype ESW code here developed during the ESW design phase with changes to make the code and public APIs more robust and resilient and to improve its usability and performance for use at the TMT Observatory.\nThree main components are delivered as part of ESW:\nSequencer: This allows users to create a Sequencer component. Both top-level Sequencer (OCS) and subsystem Sequencers can be created. Allows domain experts to write custom scripts for each sequencer in a Kotlin based domain specific language. All sequencer scripts will be written in the Sequencer Scripts Repo. Sequence Component: The Sequence Component is used to spawn and shutdown sequencers dynamically. ESW Gateway: This is provided to give access to all CSW and ESW services and components from the browser.","title":"TMT Executive Software (ESW)"},{"location":"/sequencer/state-transition.html","text":"","title":"Sequencer State Transition"},{"location":"/sequencer/state-transition.html#sequencer-state-transition","text":"Sequencer is implemented as a Finite State Machine. It has a set of states, and at any given time it could be in exactly one of those states. It supports a set of commands/messages, and on receiving those commands, it might choose to go in some other state.\nFollowing are the states supported by the Sequencer:\nIdle/Online: This is the default state of the Sequencer. A Sequencer is idle when it is up, but there’s no sequence under execution. A Sequencer can come to idle state from the following situations: when the Sequencer comes up for the first time when the Sequencer has finished execution of a sequence when the Sequencer was offline, and a goOnline command is sent Loaded: A Sequencer is in loaded state when a sequence is loaded for execution, but execution of the sequence hasn’t started. A separate start command is expected to start execution of the sequence. All sequence editor actions (for e.g. add, remove, reset) are accepted in this state. From this state, the Sequencer can go in InProgress state on receiving a start command, or it could go in offline state if goOffline command is sent. On receiving a reset command, which discards all the pending steps, the Sequencer will go to idle state. InProgress/Running: The Sequencer is in running state, only when it is executing a sequence. All sequence editor actions (for e.g. add, remove, reset) are accepted in this state. From running state, the Sequencer can go to idle state on completion of sequence, or it can be killed. In order to go offline from this state, the Sequencer has to go to idle and then offline. Offline: The Sequencer goes in offline state, only on receiving a goOffline command which can either come from an upstream sequencer, or from a user through the admin dashboard. In this state, only a few commands are excepted (for eg. goOnline, shutdown, status etc). Killed: This is the final state of the sequencer. The shutdown command can be sent in any state, hence a Sequencer can transition to this state from any other state.","title":"Sequencer State Transition"},{"location":"/sequencer/scripts/scripts.html","text":"","title":"Sequencer Script"},{"location":"/sequencer/scripts/scripts.html#sequencer-script","text":"FSM High Level DSL","title":"Sequencer Script"},{"location":"/sequencer/scripts/fsm.html","text":"","title":"FSM"},{"location":"/sequencer/scripts/fsm.html#fsm","text":"Scripts have ability to define and run Finite State Machine(FSM). FSM can transition between defined states and can be made reactive to Event and Command.","title":"FSM"},{"location":"/sequencer/scripts/fsm.html#define-fsm","text":"","title":"Define FSM"},{"location":"/sequencer/scripts/fsm.html#create-fsm","text":"To create an instance of FSM, a helper method Fsm is provided as shown in example. This method takes following parameters:\nname of FSM initial state of the FSM block having states of the FSM\nKotlin val irisFsm: Fsm = Fsm(name = \"iris-fsm\", initState = \"INIT\") {\n    // place to define all states of FSM\n}","title":"Create FSM"},{"location":"/sequencer/scripts/fsm.html#define-state","text":"As mentioned above, the third parameter of Fsm method is a block which is the place to define all the states of FSM. A method named state needs to be called with parameters name of the state and the block of actions to be performed in that state.\nNote State names are case-insensitive. In case of multiple states with same name, the last one will be considered.\nKotlin state(\"INIT\") {\n    // actions to be performed in this state\n}","title":"Define state"},{"location":"/sequencer/scripts/fsm.html#state-transition","text":"To transit between states, become method needs to be called with name of next state. This will change the state of the fsm to the given state and start executing next state. InvalidStateException will be thrown if provided state is not defined.\nKotlin become(state = \"IN-PROGRESS\")\nCaution State transition should ideally be the last call in state or should be done with proper control flow so that become is not called multiple times.\nIn a case where state transition does not happen while executing a state, the FSM will stay in the same state and re-evaluating FSM after that will execute the same state until any state transition happens. The reactive variables plays an important role in this as they are the way to re-evaluate the FSM state.\nKotlin state(\"LOW\") {\n    on(temparature.get() < 20) {\n        // do something but state transition does not happen\n    }\n\n    on(temparature.get() >= 20) {\n        // do something and transit state\n        become(\"HIGH\")\n    }\n}\nIn the example above, the FSM is in LOW state. If the temperature is below 20, then there won’t be any state transition which will keep the FSM in same LOW state. Change in temperature after that will re-evaluate the “LOW” state again and if the temperature is greater than or equal to 20 then current state will change to HIGH. In the example temperature is a event variable which enables the re-evaluation of current state on changes in temperature value.","title":"State transition"},{"location":"/sequencer/scripts/fsm.html#complete-fsm","text":"completeFsm marks the FSM complete. Calling it will immediately stop execution of the FSM and next steps will be ignored, so it should be called at the end of the state.\nKotlin completeFsm()   // will complete the Fsm\n// anything after this will not be executed","title":"Complete FSM"},{"location":"/sequencer/scripts/fsm.html#helper-constructs","text":"entry : executes the given block only when state transition happens from a different state Kotlin entry {\n    // do something\n} on : executes the given block if given condition evaluates to true. This construct should be used for conditional execution of any task. Kotlin on(temparature.get() < 20) {\n    // do something but state transition does not happen\n}\n\non(temparature.get() >= 20) {\n    // do something and transit state\n    become(\"HIGH\")\n} after : executes the given block after the given duration Kotlin after(100.milliseconds) {\n    // do something\n}","title":"Helper constructs"},{"location":"/sequencer/scripts/fsm.html#start-fsm","text":"After creating instance of FSM, it needs to be explicitly started by calling start on it. This will start executing the initial state of fsm which is provided while creating instance of it.\nCaution Calling start more than once is not supported and will lead to unpredictable behaviour.\nKotlin irisFsm.start()","title":"Start FSM"},{"location":"/sequencer/scripts/fsm.html#wait-for-completion","text":"As FSM has ability to be complete itself, await can be called to wait for its completion. Execution will be paused at the await statement till the FSM is marked complete.\nKotlin irisFsm.await()\nCalling await before calling start will start the fsm internally and then wait for completion.","title":"Wait for completion"},{"location":"/sequencer/scripts/fsm.html#reactive-fsm","text":"FSM can be made to react to changes in Event and Command parameters with help of Event variables and Command flags.\nbinding FSM to reactive variable is necessary to achieve the reactive behavior of FSM.","title":"Reactive FSM"},{"location":"/sequencer/scripts/fsm.html#event-variable","text":"Event variables are the way to make fsm react to events. Event variable can be tied to only one Parameter Key in an event. To make FSM react to Event variable, we need to create a EventVariable for a specific Parameter Key of an Event and bind the FSM to it. FSM can be bind to multiple Event variables and vise versa.\nEvent variables use Event Service underneath, which makes it possible to share data between multiple sequencers. Whenever any event is published on the key of given event, all the FSMs bound to that variable will be re-evaluated.\nEvent variables are of 2 types:\nSystemVar - are based on SystemEvent ObserveVar - are based on ObserveEvent\nEvent variable takes 4 arguments: - the initial value to set in Event parameter against the given parameter Key - the event key to tie Event variable to - the param Key whose value to read from Event parameters - the duration (optional) of the polling (Significance of duration parameter is explained below.)\nEvent variable has capability to behave one of two ways\nSubscribe to the Events getting published Poll for a new event after every certain interval","title":"Event variable"},{"location":"/sequencer/scripts/fsm.html#subscribe","text":"Event variable subscribes to the given Event key and re-evaluates the FSMs current state as soon as an event is published.\nFollowing examples shows how to create Event variables with subscribing behavior, bind FSM to it and methods like get and set. set will publish the event with modified parameter.\nKotlin //**  System Var **//\nval tempKey: Key<Int> = intKey(\"temperature\")\nval systemVar: EventVariable<Int> = SystemVar(0, \"esw.temperature.temp\", tempKey)\n\nsystemVar.bind(irisFsm) // binds the FSM and event variable\n\n//**  Observe Var **//\nval coordKey: Key<Coord> = coordKey(\"co-ordinates\")\nval observeVar: EventVariable<Coord> = ObserveVar(JEqCoord.make(0, 0), \"IRIS.observe.coord\", coordKey)\nobserveVar.get() // returns the value of the parameter from the latest event\n\nobserveVar.bind(irisFsm) // binds the FSM and event variable\n\nobserveVar.set(JEqCoord.make(1, 1)) // publishes the given value on event key","title":"Subscribe"},{"location":"/sequencer/scripts/fsm.html#poll","text":"Polling behavior is for situations when it’s not necessary to re-evaluate FSM state on every Event and can be done periodically after a certain duration. Event variable polls to get the latest Event with given duration and if a new Event is published, it will re-evaluate the FSMs current state. Polling behavior can be used when the publisher is too fast and there is no need respond so quickly to it.\nFor creating Event variable with polling behavior, it needs an extra argument which is the duration to poll with, the example code demos it. Other methods like get, set and bind are same as shown Subscribe examples above.\nKotlin // SystemVar with polling duration of 2 seconds\nval pollingSysVar: EventVariable<Int> = SystemVar(0, \"esw.temperature.temp\", tempKey, 2.seconds)\n\n// ObserveVar with polling duration of 2 seconds\nval pollingObsVar: EventVariable<Coord> = ObserveVar(JEqCoord.make(0, 0), \"iris.observe.coord\", coordKey, 2.seconds)","title":"Poll"},{"location":"/sequencer/scripts/fsm.html#commandflag","text":"Command flag acts as bridge which can used to pass Parameters to FSM from outside. Setting the params in command flag will re-evaluate the all the FSMs with provided params which are bound to that flag. It is possible to bind one FSM to multiple command flags and vise versa. Command flag is limited to scope of a single script. It does not have any remote impact.\nExample shows how to create CommandFlag, bind FSM to it and methods get and set which are provided to retrieve or set the value of params in command flag.\nKotlin val flag = CommandFlag()\nflag.bind(irisFsm) // bind the FSM and command flag\n\nonSetup(\"setup-command\") { command ->\n    flag.set(command.params) // will set params and refreshes the bound FSMs with the new params\n}\n\nflag.value() // way to extract the current params value in FSM\nNote Binding FSM to reactive variables can be done anytime in the lifecycle of FSM not only before starting it. Doing it after completion of FSM does not do anything. Binding is must for achieving the reactive behavior.","title":"CommandFlag"},{"location":"/sequencer/scripts/fsm.html#example-fsm","text":"In the below example, temparatureFsm demonstrates how to define and use FSM in the scripts. The event variable is declared with event key esw.temperature.temp for param temperature and temperatureFsm is bind to it. The job of the temperatureFsm is to decide the state based on the temperature and publish it on event key esw.temperatureFsm with param key state.\nLogic of state change is:\ncondition state temp == 30 FINISH temp > 40 ERROR else OK\nKotlin val tempKey = longKey(\"temperature\")\nval stateKey = stringKey(\"state\")\n\nval tempFsmEvent = SystemEvent(\"esw.temperatureFsm\", \"state\")\nsuspend fun publishState(baseEvent: SystemEvent, state: String) =\n        publishEvent(baseEvent.add(stateKey.set(state)))\n\n// temperature Fsm states\nval OK = \"OK\"\nval ERROR = \"ERROR\"\nval FINISHED = \"FINISHED\"\n\nval temperatureVar = SystemVar(0, \"esw.temperature.temp\", tempKey)\nval commandFlag = CommandFlag()\n\nval temperatureFsm = Fsm(\"TEMP\", OK) {\n    var fsmVariable = 10                                     // [[ 1 ]]\n\n    state(OK) {\n        val currentTemp = temperatureVar.get()        // [[ 2 ]]\n        val expectedTemp = commandFlag.value().get(intKey(\"expected-temperature\")).get().first\n\n        entry {\n            publishState(tempFsmEvent, OK)\n        }\n        on(currentTemp == 30L) {\n            become(FINISHED)                                 // [[ 3 ]]\n        }\n        on(currentTemp > 40) {\n            become(ERROR)\n        }\n        on(currentTemp <= expectedTemp) {\n            info(\"temperataure is below expected threshold\",\n                    mapOf(\"exepected\" to expectedTemp, \"current\" to currentTemp)\n            )\n        }\n    }\n\n    state(ERROR) {\n        entry {\n            publishState(tempFsmEvent, ERROR)\n        }\n        on(temperatureVar.get() < 40) {\n            become(OK)\n        }\n    }\n\n    state(FINISHED) {\n        completeFsm()                                        // [[ 4 ]]\n    }\n}\n\ntemperatureVar.bind(temperatureFsm)\ncommandFlag.bind(temperatureFsm)                             // [[ 5 ]]\n\nonSetup(\"command-1\") {\n    temperatureFsm.start()                                   // [[ 6 ]]\n}\n\nonSetup(\"command-2\") { command ->\n    commandFlag.set(command.params)                          // [[ 7 ]]\n}\n\nonSetup(\"command-3\") {\n    temperatureFsm.await()                                   // [[ 8 ]]\n}\nFull example code is available here.\nKey things in above example code are :\n[[ 1 ]]: Shows top-level scope of the FSM which can used to declare variables in FSM’s scope and statements which should be executed while starting the FSM. Statements written here will be executed only once when the FSM starts. [[ 2 ]]: The scope of the state. Statements written here will be executed on every evaluation of the state. So variables declared here will be reinitialized whenever state is re-evaluated. In the above case, the expectedTemp and currentTemp will be initialized every time the OK state is evaluated. [[ 3 ]]: State transitions from OK state to FINISHED. [[ 4 ]]: Marks the FSM complete. Re-evaluation or state transitions cannot happen after this is executed.\nTill point [[ 4 ]], it’s all about defining the blue-print and initialising state of FSM which includes executing statements at [[ 1 ]].\n[[ 5 ]]: Shows the binding temperatureFsm to temperatureVar and commandFlag. After this point, FSM will re-evaluate whenever events are published on temperatureVar. [[ 6 ]]: Starts evaluating the initial state of the FSM [[ 7 ]]: Sets the Params of the Command in the Command flag [[ 8 ]]: Waits for completion of the FSM. In example, the script execution will be blocked till line [[ 4 ]] is executed which will mark the FSM complete. The script will continue execution after FSM is marked complete.\nExample code also demos the use of the helper constructs like entry, on.","title":"Example FSM"},{"location":"/sequencer/scripts/dsl/dsl.html","text":"","title":"High Level DSL"},{"location":"/sequencer/scripts/dsl/dsl.html#high-level-dsl","text":"Location Service Config Service Command Service Event Service Logging Service Alarm Service Time Service Sequencer Command Service Script Handlers Loops Misc","title":"High Level DSL"},{"location":"/sequencer/scripts/dsl/services/location-service.html","text":"","title":"Location Service"},{"location":"/sequencer/scripts/dsl/services/location-service.html#location-service","text":"Location Service DSL is a wrapper over Location Service module provided by CSW. You can refer a detailed documentation of Location Service provided by CSW here.\nThis DSL provides following APIs:","title":"Location Service"},{"location":"/sequencer/scripts/dsl/services/location-service.html#register","text":"This DSL registers provided Registration with Location Service and returns RegistrationResult which contains Location with which component is registered and handle for un-registration.\nRegistration can be one of:\nAkkaRegistration HttpRegistration TcpRegistration\nKotlin // register HTTP service running at port 8080 and routes are served from /routes endpoint\nval registrationResult: RegistrationResult =\n        register(HttpRegistration(httpConnection, port, \"/routes\"))\n\n// location which is registered with Location Service\nval location: Location = registrationResult.location\n\n// unregisters location from Location Service which triggers LocationRemoved event\nregistrationResult.unregister()","title":"register"},{"location":"/sequencer/scripts/dsl/services/location-service.html#unregister","text":"This DSL un-registers provided Connection from Location Service\nConnection can be one of:\nAkkaConnection HttpConnection TcpConnection\nKotlin val sourcePrefix: Prefix = cmd.source()\nval componentId = ComponentId(sourcePrefix, JComponentType.Service())\n\nunregister(HttpConnection(componentId))","title":"unregister"},{"location":"/sequencer/scripts/dsl/services/location-service.html#findlocation","text":"This DSL look up for provided Connection in Location Service and returns corresponding Location or null if not found.\nKotlin val prefix: Prefix = cmd.source()\nval assemblyConnection = AkkaConnection(ComponentId(prefix, JComponentType.Assembly()))\n\nval location: AkkaLocation? = findLocation(assemblyConnection)\n\n// send a successful event to UI if assembly location is found\nlocation?.let { sendUIEvent(\"Resolved assembly location: $it\") }","title":"findLocation"},{"location":"/sequencer/scripts/dsl/services/location-service.html#resolvelocation","text":"This DSL keeps looking for provided Connection in Location Service for the provided/default duration and returns corresponding Location or null if not found after duration exhausts.\nKotlin val prefix: Prefix = cmd.source()\nval assemblyConnection = AkkaConnection(ComponentId(prefix, JComponentType.Assembly()))\n\nval location: AkkaLocation? = resolveLocation(assemblyConnection)\n\n// send a successful event to UI if assembly location is found\nlocation?.let { sendUIEvent(\"Resolved assembly location: $it\") }","title":"resolveLocation"},{"location":"/sequencer/scripts/dsl/services/location-service.html#listlocations","text":"Lists all the locations currently registered with the Location Service.\nKotlin val allLocations: List<Location> = listLocations()\n\n// publish all locations to UI in the format of [location1, location2, ...]\nsendUIEvent(allLocations.joinToString(prefix = \"[\", postfix = \"]\"))","title":"listLocations"},{"location":"/sequencer/scripts/dsl/services/location-service.html#listlocationsby","text":"Following various APIs are provided for listing locations with filtering criteria:","title":"listLocationsBy"},{"location":"/sequencer/scripts/dsl/services/location-service.html#","text":"Filters locations based on provided ComponentType, for example, HCD, Assembly, Sequencer etc.\nFollowing example demonstrate a use case where script sends Offline command to all the Assemblies.\nKotlin onSetup(\"offline-assemblies\") {\n    // list all Assembly components\n    val assemblyLocations: List<Location> = listLocationsBy(JComponentType.Assembly())\n\n    // create Assemblies from locations and send offline command to each one of them\n    val assemblies = assemblyLocations.map { Assembly(it.prefix().toString(), 10.minutes) }\n    assemblies.forEach { it.goOffline() }\n}","title":"ComponentType"},{"location":"/sequencer/scripts/dsl/services/location-service.html#","text":"Filters locations based on provided ConnectionType, for example, AkkaType, HttpType, TcpType etc.\nFollowing example demonstrate a use case where script locks all the components i.e. Assemblies and HCD’s.\nKotlin onSetup(\"lock-all-components\") {\n    val timeout = 10.minutes\n    val leaseDuration = 20.minutes\n\n    // list all akka components\n    val akkaLocations: List<Location> = listLocationsBy(JConnectionType.AkkaType())\n\n    // filter HCD's and Assemblies and send Lock command\n    akkaLocations.forEach { location ->\n        val compId: ComponentId = location.connection().componentId()\n        val compType: ComponentType = compId.componentType()\n        val prefix = location.prefix().toString()\n\n        // create Assembly or Hcd instance based on component type and send Lock command\n        when (compType) {\n            JComponentType.Assembly() -> Assembly(prefix, timeout).lock(leaseDuration)\n\n            JComponentType.HCD() -> Hcd(prefix, timeout).lock(leaseDuration)\n\n            else -> warn(\"Unable to lock component $compId, Invalid component type $compType\")\n        }\n    }\n}","title":"ConnectionType"},{"location":"/sequencer/scripts/dsl/services/location-service.html#hostname","text":"Filters locations based on provided hostname.\nIn the following example, we are listing all the components running on IRIS (hostname: 10.1.1.1) machine\nKotlin // list all the components running on IRIS machine\nval irisMachineHostname = \"10.1.1.1\"\nval irisMachineLocations: List<Location> = listLocationsBy(\"10.1.1.1\")\n\nsendUIEvent(\"IRIS machine running components: [$irisMachineLocations]\")","title":"Hostname"},{"location":"/sequencer/scripts/dsl/services/location-service.html#prefix","text":"Filters locations based on provided Prefix.\nIn the following example, we are listing all the componenst registered using Prefix: IRIS.filter.wheel where IRIS is a Subsystem and filter.wheel is a component name\nKotlin val irisPrefix = Prefix(\"IRIS.filter.wheel\")\nval irisComponents: List<Location> = listLocationsBy(irisPrefix)\n\n// log Assembly and HCD location\nirisComponents.forEach {\n    when (it.connection().componentId().componentType()) {\n        JComponentType.Assembly() -> info(\"$irisPrefix is registered as Assembly with location: $it\")\n\n        JComponentType.HCD() -> info(\"$irisPrefix is registered as HCD with location: $it\")\n\n        else -> error(\"Invalid location: $it found for $irisPrefix\")\n    }\n}","title":"Prefix"},{"location":"/sequencer/scripts/dsl/services/location-service.html#onlocationtrackingevent","text":"This DSL allows you to add a callback on every location changed event which is represented by TrackingEvent.\nTrackingEvent has following two subclasses\nLocationUpdated: Published when location is registered with Location Service LocationRemoved: Published when location is removed from Location Service\nKotlin onObserve(\"monitor-iris-sequencer\") {\n    val irisPrefix = Prefix(\"IRIS.darknight\")\n    val irisComponent = ComponentId(irisPrefix, JComponentType.Sequencer())\n    val irisSequencerConnection = AkkaConnection(irisComponent)\n\n    // send UI events on iris sequencers location change\n    onLocationTrackingEvent(irisSequencerConnection) {\n        when (it) {\n            is LocationUpdated ->\n                sendUIEvent(\"[INFO] Location updated ${it.location()}\")\n\n            is LocationRemoved ->\n                sendUIEvent(\"[ERROR] Location removed for connection: ${it.connection()}\")\n        }\n    }\n}\nNote sendUIEvent used in above examples is just for demonstration purpose and is not part of DSL. sendUIEvent publish SystemEvent with provided message.","title":"onLocationTrackingEvent"},{"location":"/sequencer/scripts/dsl/services/location-service.html#source-code-for-examples","text":"Location Service Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/services/config-service.html","text":"","title":"Config Service"},{"location":"/sequencer/scripts/dsl/services/config-service.html#config-service","text":"Config Service DSL is a wrapper over Config Service module provided by CSW. You can refer a detailed documentation of Config Service provided by CSW here.\nThis DSL provides APIs to check if file exists in Configuration Service and retrieve its contents.","title":"Config Service"},{"location":"/sequencer/scripts/dsl/services/config-service.html#existsconfig","text":"This DSL checks if provided file exists in Configuration Service with given revision id (if provided) and returns true or false based on that.\nKotlin val commandsFile = \"/wfos/commands.conf\"\nval commandsConfigExist: Boolean = existsConfig(commandsFile)\n\n// terminate script if required configuration file does not exist\nif (!commandsConfigExist) finishWithError(\"Configuration file [$commandsFile] not found in configuration service\")","title":"existsConfig"},{"location":"/sequencer/scripts/dsl/services/config-service.html#getconfig","text":"This DSL retrieves the content of the file present at the provided path in Configuration Service. It returns null if file is not available in Configuration Service.\nIn the below example, we are performing following steps:\nRetrieve configuration file from Configuration Service Fail/Terminate script if configuration file does not exist Parse retrieved configuration file and convert it to MotorCommands domain model When Sequencer receives set-motor-speed command, then submit set-speed command to downstream motor HCD When Sequencer receives rotate-motor command, then send set-resolution command to downstream motor HCD\nKotlin val wfosCommandsFile = \"/wfos/commands.conf\"\n\n// retrieve configuration file from config service, terminate script if configuration file does not exist\nval commandsConfig: Config = getConfig(wfosCommandsFile)\n        ?: finishWithError(\"Configuration file [$wfosCommandsFile] not found in configuration service\")\n\nval motorCommands = MotorCommands.from(commandsConfig)\n\n// on receiving `set-motor-speed` command, send `set-speed` command to downstream motor hcd\nonSetup(\"set-motor-speed\") {\n    val motorSpeedParam = motorSpeedKey.set(motorCommands.setMotorSpeed)\n    val setSpeedCommand = Setup(motorPrefix, \"set-speed\").add(motorSpeedParam)\n    motorHcd.submit(setSpeedCommand)\n}\n\n// on receiving `set-step-motor-resolution` command, send `set-resolution` command to downstream motor hcd\nonSetup(\"set-step-motor-resolution\") {\n    val setResolutionParam = motorResolutionKey.set(motorCommands.setStepMotorResolution)\n    val setResolutionCommand = Setup(motorPrefix, \"set-resolution\").add(setResolutionParam)\n    motorHcd.submit(setResolutionCommand)\n}\nFollowing example shows sample for converting Config object retrieved from Configuration Service to custom domain models.\nRefer this guide for complete usage of Config.\nKotlin /**\n * ======== Sample commands.conf file ========\n * wfos.motor.commands {\n *      set-motor-speed = 50\n *      set-step-motor-resolution = \"1080p\"\n * }\n */\ndata class MotorCommands(val setMotorSpeed: Long, val setStepMotorResolution: String) {\n\n    // static factory to create `MotorCommands` from `Config` object\n    // Ex. MotorCommands.from(config)\n    companion object {\n        fun from(wfosCommandsConfig: Config): MotorCommands {\n            val motorCommandsConfig: Config = wfosCommandsConfig.getConfig(\"wfos.motor.commands\")\n            return MotorCommands(\n                    motorCommandsConfig.getLong(\"set-motor-speed\"),\n                    motorCommandsConfig.getString(\"set-step-motor-resolution\")\n            )\n        }\n    }\n}","title":"getConfig"},{"location":"/sequencer/scripts/dsl/services/config-service.html#source-code-for-examples","text":"Config Service Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/services/command-service.html","text":"","title":"Command Service"},{"location":"/sequencer/scripts/dsl/services/command-service.html#command-service","text":"Command Service DSL is a Kotlin wrapper for the CSW Command Service module for sending commands to Assemblies or HCDs via scripts. You can refer to detailed documentation of the Command Service provided by CSW here. This DSL exposes following APIs:","title":"Command Service"},{"location":"/sequencer/scripts/dsl/services/command-service.html#assembly","text":"This DSL creates a Command Service DSL object for the Assembly with the provided prefix that can be used to send commands from a script, such as sending Setups or Observes or lifecycle methods e.g. goOnline, goOffline, lock Assembly etc. This API also takes a default timeout which will be used for commands like submitAndWait, queryFinal etc.\nThis DSL takes following parameters:\nprefix: Prefix of assembly defaultTimeout: command response timeout to be used when not explicitly provided for command\nKotlin val galilAssembly = Assembly(\"TCS.galil\", defaultTimeout = 10.seconds)","title":"Assembly"},{"location":"/sequencer/scripts/dsl/services/command-service.html#hcd","text":"This DSL creates a Command Service DSL object for the HCD with the provided prefix that can be used to send commands from a script, such as sending Setups or Observes or lifecycle methods e.g. goOnline, goOffline, lock Assembly etc. This API also takes a default timeout which will be used for commands like submitAndWait, queryFinal etc.\nThis DSL takes following parameters:\nprefix: - Prefix of HCD defaultTimeout: - command response timeout to be used when not explicitly provided for command\nKotlin val filterWheelHcd = Hcd(\"TCS.filter.wheel.hcd\", defaultTimeout = 10.seconds)\nNote Since all the components in the TMT architecture are dynamic in nature, which implies they can be shutdown and spawned dynamically on some other location, the Assembly/HCD is resolved each time the Command Service DSL is used.","title":"HCD"},{"location":"/sequencer/scripts/dsl/services/command-service.html#command-service-dsl","text":"","title":"Command Service DSL"},{"location":"/sequencer/scripts/dsl/services/command-service.html#submit","text":"This DSL allows you to use the submit API to send a command to the Assembly/HCD, which returns a Started response on successful validation. In this case, the final response can be obtained with the queryFinal api.\nKotlin val startedResponse = galilAssembly.submit(command)","title":"Submit"},{"location":"/sequencer/scripts/dsl/services/command-service.html#error-handling","text":"In many cases, any errors encountered in a script would likely cause the command (and therefore, sequence) to fail. Most of the time, not much can be done other than capture and report the error that occurred. It is possible some remediation can be performed, but it is likely the sequence would need to run again. For this reason, we have simplified the error handling of commands such that errors from the Command Service DSL calls are recasted as exceptions, which can then be caught by error handlers global to the sequence command handler, or the entire script. In this way, such error handling does not need to be repeated throughout the script for each command sent.\nTo add an error handler to a sequence command handler, extend the command handler block with a .onError block. The SubmitResponse error is captured in a ScriptError type and passed into the block. This type contains a reason String explaining what went wrong. If this block does not exist, the global error handler will be called. See the page on Script Handlers for more information. After this block is called, the command, and the sequence, terminate with an Error status.\nBecause of this mechanism, a submit (and other Command Service API calls) always returns a positive SubmitResponse. For submit, the two possible responses are Started and Completed. They can be handled using the .onStarted and .onCompleted methods, respectively. These methods allow you to specify a block of code to be called in each of those cases. Alternatively, a Kotlin when can be used to perform pattern matching on the result. An example of both are shown below, along with an example of an onError handler for the sequence command handler.\nKotlin onSetup(\"submit-error-handling\") { command ->\n\n    /* =========== Scenario-1 (default) ============\n     * if submit returns negative response (which is considered as error by default)\n     * then current execution flow breaks and onError command handler gets invoked\n     * Hence, only Started (in case of long-running command) or Completed (in case of short running command) response is returned\n     */\n    val positiveSubmitResponse: CommandResponse.SubmitResponse = galilAssembly.submit(command)\n\n    //  First approach - using custom dsl (this is an alternative to kotlin pattern match using when)\n    positiveSubmitResponse\n            .onStarted { startedRes ->\n                val completedResponse = galilAssembly.queryFinal(startedRes.runId())\n                info(\"command completed with result: ${completedResponse.result}\")\n            }\n            .onCompleted { completed ->\n                info(\"command with ${completed.runId()} is completed with result: ${completed.result}\")\n            }\n\n    // Second approach - using kotlin pattern matching\n    when (positiveSubmitResponse) {\n        is CommandResponse.Started -> {\n            val completedResponse = galilAssembly.queryFinal(positiveSubmitResponse.runId())\n            info(\"command completed with response: $completedResponse\")\n        }\n        is CommandResponse.Completed -> info(\"command with ${positiveSubmitResponse.runId()} is completed\")\n    }\n\n}.onError { err ->\n    // onError is called when submit command to galil assembly fails\n    error(err.reason)\n}\nIf you desire to handle errors manually on a per-command basis, the resumeOnError flag can be used. If this flag is set to true, then script execution continues, and action is taken based on custom logic in script by using an .onFailed method. You can still choose to terminate sequence using the onFailedTerminate utility. This will cause similar behavior as when flag is not set by calling the onError or onGlobalError blocks and terminating the sequence, if the SubmitResponse is some kind of error.\nKotlin onSetup(\"submit-error-handling-resume\") { command ->\n    /* =========== Scenario-2 (resumeOnError = true) ============\n     * if submit returns negative response\n     * then current execution flow will continue because resumeOnError = true\n     * Here, all the possible SubmitResponses are expected to be returned\n     */\n    val submitResponse: CommandResponse.SubmitResponse = galilAssembly.submit(command, resumeOnError = true)\n\n    //  First approach - using custom dsl (this is an alternative to kotlin pattern match using when)\n    submitResponse\n            .onStarted { startedRes ->\n                val completedResponse = galilAssembly.queryFinal(startedRes.runId())\n                info(\"command completed with result: ${completedResponse.result}\")\n            }\n            .onCompleted { completed ->\n                info(\"command with ${completed.runId()} is completed with result: ${completed.result}\")\n            }\n            .onFailed { negativeResponse ->\n                error(\"command with ${negativeResponse.runId()} is failed with result: ${negativeResponse}\")\n\n            }\n\n    // Script writer can still choose to terminate sequence in case of negative response\n    submitResponse.onFailedTerminate()\n}","title":"Error handling"},{"location":"/sequencer/scripts/dsl/services/command-service.html#submitandwait","text":"This DSL allows you to submit a command to the Assembly/HCD and wait for the final response. A timeout can be specified, indicating the time which it will wait for getting final submit response. If this time expires, the command will timeout, breaking script execution flow, and the sequence is terminated with failure. If timeout is not provided explicitly, then timeout provided while creating instance of Assembly/HCD is used as default timeout. This command follows the same error handling semantics as submit as described above.\nKotlin galilAssembly.submitAndWait(command, timeout = 20.seconds)","title":"SubmitAndWait"},{"location":"/sequencer/scripts/dsl/services/command-service.html#query","text":"This DSL allows you to query the status of submit command that has returned a Started response . This response contains a runId which can be used to identify the command to query. This command follows the same error handling semantics as submit as described above.\nKotlin val response = galilAssembly.submit(command, resumeOnError = true)\n\ngalilAssembly.query(response.runId())","title":"Query"},{"location":"/sequencer/scripts/dsl/services/command-service.html#queryfinal","text":"This DSL allows querying for final response of a submit command that has returned a Started response . This response contains a runId which can be used to identify the command to query for its final response. A timeout can be specified, indicating the time which it will wait for getting final submit response. If this time expires, the command will timeout, breaking script execution flow, and the sequence is terminated with failure. If timeout is not provided explicitly, then the timeout provided while creating instance of Assembly/HCD is used. This command follows the same error handling semantics as submit as described above.\nKotlin val startedResponse = galilAssembly.submit(command)\ngalilAssembly.queryFinal(startedResponse.runId())","title":"QueryFinal"},{"location":"/sequencer/scripts/dsl/services/command-service.html#subscribecurrentstate","text":"This DSL allows subscribing to the current state data of the Assembly/HCD. You can provide a list of state names to subscribe to. If not provided, all current state values are subscribed to. This DSL takes callback (or lambda), which is called whenever a item in the list of subscribed values changes value.\nKotlin galilAssembly.subscribeCurrentState(StateName(\"stateName1\")) { currentState ->\n    // do something with currentState matching provided state name\n    println(\"current state : $currentState\")\n}","title":"SubscribeCurrentState"},{"location":"/sequencer/scripts/dsl/services/command-service.html#going-online-offline-mode","text":"This is a Kotlin wrapper for putting an Assembly/HCD into Online or Offline mode. When an Assembly/HCD receives this command, its respective handlers are called. The detailed documentation of Online/Fffline handlers for Assembly/HCD can be found here","title":"Going online/offline mode"},{"location":"/sequencer/scripts/dsl/services/command-service.html#goonline","text":"This DSL command puts an Assembly/HCD into Online mode. goOnline can be called from anywhere in script. The following example shows a Sequencer sending the goOnline command to a downstream “Galil Assembly” when it receives a goOnline command.\nKotlin onGoOnline {\n    // do some actions to go online\n    galilAssembly.goOnline()\n}","title":"goOnline"},{"location":"/sequencer/scripts/dsl/services/command-service.html#gooffline","text":"This DSL command puts an Assembly/HCD into Offline mode. goOffline can be called from anywhere in script. The following example shows a Sequencer sending the goOffline command to a downstream “Galil Assembly” when it receives a goOffline command.\nKotlin onGoOffline {\n    // do some actions to go offline\n\n    galilAssembly.goOffline()\n\n}","title":"goOffline"},{"location":"/sequencer/scripts/dsl/services/command-service.html#operations-mode-and-diagnostic-mode","text":"","title":"Operations mode and Diagnostic mode"},{"location":"/sequencer/scripts/dsl/services/command-service.html#operationsmode","text":"This DSL command puts an Assembly/HCD into Operations mode. operationsMode can be called from anywhere in script. The following example shows a Sequencer sending the operationsMode command to a downstream “Galil Assembly” when it receives an operationsMode command.\nKotlin onOperationsMode {\n    // do some actions to go to operations mode\n    galilAssembly.operationsMode()\n}","title":"operationsMode"},{"location":"/sequencer/scripts/dsl/services/command-service.html#diagnosticmode","text":"This DSL command puts an Assembly/HCD into Diagnostic data mode based on a hint at the specified startTime. diagnosticMode can be called from anywhere in script. The following example shows a Sequencer sending the diagnosticMode command to a downstream “Galil Assembly” when it receives a diagnosticMode command.\nKotlin onDiagnosticMode { startTime, hint ->\n    // do some actions to go to diagnostic mode based on hint\n    galilAssembly.diagnosticMode(startTime, hint)\n}","title":"diagnosticMode"},{"location":"/sequencer/scripts/dsl/services/command-service.html#locking-and-unlocking","text":"","title":"Locking and unlocking"},{"location":"/sequencer/scripts/dsl/services/command-service.html#lock","text":"This DSL command locks an Assembly/HCD from a Sequencer script for the specified duration. When you lock an Assembly/HCD, the Sequencer sending the lock command is designated as the source, which is the only component that can send commands to the locked component while locked. This DSL returns a LockingResponse which can be LockAcquired in the successful scenario or AcquiringLockFailed in case of failure. This DSL also provides callbacks for onLockAboutToExpire and, onLockExpired where script writer can write custom logic. These callbacks are thread safe.\nKotlin galilAssembly.lock(\n        leaseDuration = 20.seconds,\n        onLockAboutToExpire = {\n            // do something when lock is about to expire\n            publishEvent(SystemEvent(\"ESW.test\", \"TCS.lock.about.to.expire\"))\n        },\n        onLockExpired = {\n            // do something when lock expired\n            publishEvent(SystemEvent(\"ESW.test\", \"TCS.lock.expired\"))\n        }\n)","title":"lock"},{"location":"/sequencer/scripts/dsl/services/command-service.html#unlock","text":"This DSL command unlocks an Assembly/HCD from a Sequencer script for the specified duration. Only the Sequencer who locked the Assembly/HCD can unlock it. This DSL returns a LockingResponse which can be LockReleased or LockAlreadyReleased in the successful scenario or ReleasingLockFailed in case of failure.\nKotlin galilAssembly.unlock()","title":"unlock"},{"location":"/sequencer/scripts/dsl/services/command-service.html#source-code-for-examples","text":"Command Service Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/services/event-service.html","text":"","title":"Event Service"},{"location":"/sequencer/scripts/dsl/services/event-service.html#event-service","text":"The Event Service DSL is a Kotlin wrapper for the CSW Event Service. This DSL has the ability of publishing, getting, and subscribing to events, and also contains some helper methods for model creation. You can refer to the detailed documentation of Event Service provided by CSW here.","title":"Event Service"},{"location":"/sequencer/scripts/dsl/services/event-service.html#helper-methods","text":"These methods can be used to create Systerm and Observe Events. Additionally, a System or Observe “Event Variable” can be created that can be tied to the first value of a parameter of an Event, similar to the way local variables are tied to “process variables” in the EPICS State Notation Language (see EPICS Sequencer Documentation for more information).","title":"Helper Methods"},{"location":"/sequencer/scripts/dsl/services/event-service.html#systemevent","text":"Helper DSL to create a SystemEvent from the provided prefix, event name and parameters (optional).\nKotlin val parameters = intKey(\"temperature\").set(0)\nval systemEvent: SystemEvent = SystemEvent(\"esw.temperature\", \"temp\", parameters)","title":"SystemEvent"},{"location":"/sequencer/scripts/dsl/services/event-service.html#observeevent","text":"Helper DSL to create an ObserveEvent from the provided prefix, event name and parameters (optional).\nKotlin val parameters = intKey(\"temperature\").set(0)\nval observeEvent: ObserveEvent = ObserveEvent(\"ocs.master\", \"observationStarted\")","title":"ObserveEvent"},{"location":"/sequencer/scripts/dsl/services/event-service.html#systemvar","text":"Helper DSL to create an EventVariable corresponding to a parameter of a SystemEvent. This DSL needs the initial value of the parameter, the name of the EventKey, and the ParameterKey of the connected parameter. More details about SystemVars are provided in the FSM documentation\nKotlin val locKey = intKey(\"current-location\")\nval systemVar: EventVariable<Int> = SystemVar(0, \"ocs.motor.position\", locKey)","title":"SystemVar"},{"location":"/sequencer/scripts/dsl/services/event-service.html#observevar","text":"Helper DSL to create an EventVariable corresponding to a parameter of an ObserveEvent. This DSL needs the initial value of the parameter, the name of the EventKey and the ParameterKey of the connected parameter. More details about ObserveVars are provided in the FSM documentation\nKotlin val readNumberKey = intKey(\"readNumber\")\nval observeVar: EventVariable<Int> = ObserveVar(0, \"IRIS.ifs.detector.readCompleted\", readNumberKey)","title":"ObserveVar"},{"location":"/sequencer/scripts/dsl/services/event-service.html#publishevent","text":"DSL to publish the given Event.\nKotlin val systemEvent: SystemEvent = SystemEvent(\"esw.temperature\", \"temp\", parameters)\npublishEvent(systemEvent)\nThis DSL can also publish events periodically when provided with the optional duration and an event generator function.\nKotlin publishEvent(10.seconds) {\n    // event generator which returns event to publish after the given interval\n    systemEvent\n}","title":"publishEvent"},{"location":"/sequencer/scripts/dsl/services/event-service.html#onevent","text":"DSL to subscribe to events getting published on the given EventKey names. This DSL takes a callback as a lambda which operates on an event. The callback block will be invoked whenever an Event is published on any of the provided event keys.\nKotlin val tempEventKey = \"esw.temperature.temp\"\nval stateEventKey = \"esw.temperature.state\"\nonEvent(tempEventKey, stateEventKey) { event ->\n    // logic to execute on every event\n    println(event.eventKey())\n}\nThis DSL has the ability to control the subscription rate by providing a duration with the callback. This operates like the Rate Adapter Mode for regular Event Service subscriptions.\nKotlin onEvent(tempEventKey, stateEventKey, duration = 2.seconds) { event ->\n    // logic to execute on every event\n    println(event.eventKey())\n}","title":"onEvent"},{"location":"/sequencer/scripts/dsl/services/event-service.html#getevent","text":"DSL to get the latest Event published on each of the given EventKey names.\nKotlin val tempEventKey = \"esw.temperature.temp\"\nval stateEventKey = \"esw.temperature.state\"\nval events: Set<Event> = getEvent(tempEventKey, stateEventKey)","title":"getEvent"},{"location":"/sequencer/scripts/dsl/services/event-service.html#source-code-for-examples","text":"Event Service Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/services/logging-service.html","text":"","title":"Logging Service"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#logging-service","text":"Logging Service DSL is a wrapper over Logging Service module provided by CSW. You can refer a detailed documentation of Logging Service provided by CSW here.\nCSW documentation explains all the supported logging related configurations for example, default log level, component specific log levels, log appender etc. It also explains how to override default values.\nAll the Sequencer scripts are expected to be kept inside sequencer-scripts repo under Subsystem specific directories. Read more about adding new scripts and script specific configuration files here.","title":"Logging Service"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#changing-sequencer-log-level","text":"Let’s say you are writing IRIS darknight (IrisDarknight.kts) script. You place this script in scripts/iris directory in sequencer-scripts repo. In the same directory, you can create your Subsystem specific configuration file, in this case iris.conf file.\nAdd following snippets in iris.conf file to change IRIS darknight scripts default log level to debug :\n# iris.conf\n\ncsw-logging {\n  component-log-levels {\n    iris.darknight = debug\n  }\n}\nOnce you add this configuration in iris.conf file, next step is to include this configuration file in application.conf file present at scripts/application.conf location in sequencer-scripts repo as shown in below snippet:\n# application.conf\n\ninclude \"iris.conf\"\nNote IRIS - name of the Sequencer/Script Subsystem provided while starting Sequencer App darknight - observing mode provided while starting Sequencer App\nLogging Service DSL exposes following APIs to script writers for logging at different levels:","title":"Changing Sequencer Log Level"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#trace","text":"Kotlin trace(message = \"logging at trace level\")\n\ntrace(message = \"logging at trace level\",\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))","title":"trace"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#debug","text":"Kotlin debug(message = \"logging at debug level\")\n\ndebug(message = \"logging at debug level\",\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))","title":"debug"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#info","text":"Kotlin info(message = \"logging at info level\")\n\ninfo(message = \"logging at info level\",\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))","title":"info"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#warn","text":"Kotlin warn(message = \"logging at warn level\")\n\nwarn(message = \"logging at warn level\", cause = highTempRaisedEx)\n\nwarn(message = \"logging at warn level\",\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))\n\nwarn(message = \"logging at warn level\", cause = highTempRaisedEx,\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))","title":"warn"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#error","text":"Kotlin error(message = \"logging at error level\")\n\nerror(message = \"logging at error level\", cause = highTempRaisedEx)\n\nerror(message = \"logging at error level\",\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))\n\nerror(message = \"logging at error level\", cause = highTempRaisedEx,\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))","title":"error"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#fatal","text":"Kotlin fatal(message = \"logging at fatal level\")\n\nfatal(message = \"logging at fatal level\", cause = highTempRaisedEx)\n\nfatal(message = \"logging at fatal level\",\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))\n\nfatal(message = \"logging at fatal level\", cause = highTempRaisedEx,\n        extraInfo = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\"))","title":"fatal"},{"location":"/sequencer/scripts/dsl/services/logging-service.html#source-code-for-examples","text":"Logging Service Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/services/alarm-service.html","text":"","title":"Alarm Service"},{"location":"/sequencer/scripts/dsl/services/alarm-service.html#alarm-service","text":"Alarm Service DSL is a wrapper over Alarm Service module provided by CSW. You can refer a detailed documentation of Alarm Service provided by CSW here.\nThis DSL provides an API to set the severity of alarm.","title":"Alarm Service"},{"location":"/sequencer/scripts/dsl/services/alarm-service.html#setseverity","text":"This API sets alarm severity for alarm key to provided value and keeps refreshing it in the background with the interval of config value csw-alarm.refresh-interval. Default value for csw-alarm.refresh-interval config is 3 seconds which is configured in downstream CSW alarm modules reference.conf file.\nsetSeverity API requires user to provide AlarmKey and AlarmSeverity.","title":"setSeverity"},{"location":"/sequencer/scripts/dsl/services/alarm-service.html#alarmkey","text":"AlarmKey represents unique alarm in the given subsystem and component e.g. nfiraos.trombone.tromboneaxislowlimitalarm\nFollowing example demonstrate creation of AlarmKey\nKotlin val tromboneTemperatureAlarm =\n        AlarmKey(Prefix(NFIRAOS, \"trombone\"), \"tromboneMotorTemperatureAlarm\")","title":"AlarmKey"},{"location":"/sequencer/scripts/dsl/services/alarm-service.html#alarmseverity","text":"Supported AlarmSeverity are:\nOkay Warning Major Indeterminate Disconnected Critical\nFollowing example demonstrate the usage of setSeverity API. In this example, temperature Fsm is created and based on the state of fsm, severity is set accordingly.\nState Temperature Severity OK Temp > 20 && temp < 40 Okay ERROR Temp < 20 or temp > 40 Major\nKotlin /**\n * temp > 20 && temp < 40   => Severity.Okay\n * else                     => Severity.Major\n */\nval temperatureFsm = Fsm(\"TEMP\", OK) {\n    state(OK) {\n        entry {\n            setSeverity(tromboneTemperatureAlarm, Okay)\n        }\n\n        on(temperatureVar.get() > 40) {\n            become(ERROR)\n        }\n    }\n\n    state(ERROR) {\n        entry {\n            setSeverity(tromboneTemperatureAlarm, Major)\n        }\n\n        on(temperatureVar.get() < 40) {\n            become(OK)\n        }\n    }\n}","title":"AlarmSeverity"},{"location":"/sequencer/scripts/dsl/services/alarm-service.html#source-code-for-examples","text":"Alarm Service Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/services/time-service.html","text":"","title":"Time Service"},{"location":"/sequencer/scripts/dsl/services/time-service.html#time-service","text":"Time Service DSL is DSL wrapper over Time Service module provided by CSW. This DSL exposes following APIs to script writers to schedule tasks at given time. It also exposes utility methods for getting specified utc time or tai time and calculate offset.","title":"Time Service"},{"location":"/sequencer/scripts/dsl/services/time-service.html#utctimenow","text":"This utility provides current utc time.\nKotlin val currentUtcTime = utcTimeNow()","title":"utcTimeNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#taitimenow","text":"This utility provides current utc time.\nKotlin val currentTaiTime = taiTimeNow()","title":"taiTimeNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#utctimeafter","text":"This utility provides utc time after provided duration. Following example shows how to get utc time after 1 hour\nKotlin val utcTime = utcTimeAfter(1.hours)","title":"utcTimeAfter"},{"location":"/sequencer/scripts/dsl/services/time-service.html#taitimeafter","text":"This utility provides tai time after provided duration. Following example shows how to get tai time after 1 hour\nKotlin val taiTime = taiTimeAfter(1.hours)","title":"taiTimeAfter"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleonce","text":"This API allows scheduling non periodic task in script at specified utc time or tai time. This returns a handle to cancel the execution of the task if it hasn’t been executed already. Task is a callback which will be executed in thread safe way.\nFollowing example shows onObserve handler of Sequencer is extracting schedule time from received observe command. It is creating probe command which is then submitted to downstream galil Assembly at scheduled time.\nKotlin val scheduleTimeKey = utcTimeKey(\"scheduledTime\")\nval schedulePrefix = \"esw.test\"\nval galilAssembly = Assembly(\"TCS.galil\", defaultTimeout = 10.seconds)\n\n//Usage inside handlers - schedule tasks while handling setup/observe commands\nonObserve(\"schedule-once\") {command ->\n    val scheduledTime = command(scheduleTimeKey)\n    val probeCommand = Setup(schedulePrefix, \"scheduledOffset\", command.obsId)\n\n    scheduleOnce(scheduledTime.head()) {\n        galilAssembly.submit(probeCommand)\n    }\n}","title":"scheduleOnce"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleoncefromnow","text":"This API allows scheduling non periodic task in script after specified duration. Task is a callback which will be executed in thread safe way. This API takes time duration after which task will be scheduled. scheduleOnceFromNow internally creates instance of utc time considering specified in duration. Following example shows scheduling task after 1 hour from current utc time. This returns a handle to cancel the execution of the task if it hasn’t been executed already.\nKotlin scheduleOnceFromNow(1.hours) {\n    publishEvent(SystemEvent(\"LGSF\", \"publish.success\"))\n}","title":"scheduleOnceFromNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleperiodically","text":"This API allows to schedule a task to execute periodically at the given interval. Task is a callback which will be executed in thread safe way. The task is executed once at the given start time followed by execution of task at each interval. This returns a handle to cancel the execution of further tasks.\nKotlin val offsetTimeKey = utcTimeKey(\"offsetTime\")\nval offsetPrefix = \"esw.offset\"\nval assemblyForOffset = Assembly(\"TCS.galil\", defaultTimeout = 10.seconds)\n\nonSetup(\"schedule-periodically\") {command ->\n    val scheduledTime = command(offsetTimeKey)\n    val probeCommand = Setup(schedulePrefix, \"scheduledOffset\", command.obsId)\n\n    schedulePeriodically(scheduledTime.head(), interval = 5.seconds) {\n        assemblyForOffset.submit(probeCommand)\n    }\n}","title":"schedulePeriodically"},{"location":"/sequencer/scripts/dsl/services/time-service.html#scheduleperiodicallyfromnow","text":"This API allows to schedule a task to execute periodically at the given interval. Task is a callback which will be executed in thread safe way. This API takes time duration after which task will be scheduled once followed by execution of task at each interval. Following example shows scheduling task after 1 hour from current utc time and then executing it periodically at 10 seconds interval. This returns a handle to cancel the execution of further tasks.\nKotlin schedulePeriodicallyFromNow(1.hours, 10.seconds) {\n    publishEvent(SystemEvent(\"LGSF\", \"publish.success\"))\n}","title":"schedulePeriodicallyFromNow"},{"location":"/sequencer/scripts/dsl/services/time-service.html#source-code-for-above-examples","text":"Time Service Example Script","title":"Source code for above examples"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html","text":"","title":"Sequencer Command Service"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#sequencer-command-service","text":"In order to interact or send commands from one Sequencer to the other, one needs to create a Sequencer instance first and then send commands to it.\nTo create a Sequencer instance, following parameters need to be passed:\nsubsystem: Subsystem of the Sequencer to be resolved and send commands to (for eg. TCS, IRIS) observingMode: observing mode of the Sequencer to be resolved and send commands to (for eg. darknight, clearsky) defaultTimeout: max timeout to wait for responses of commands like sumbitAndWait or queryFinal\nKotlin // create and resolve sequencer\nval tcsSequencer = Sequencer(\"TCS\", \"darknight\", 5.seconds)\nSince all the components in the TMT architecture are dynamic in nature, which implies they can be shutdown and spawned dynamically on some other location, the Sequencer is resolved each time on receiving a command with the provided subsystem and observingMode.","title":"Sequencer Command Service"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#submitting-sequences-to-sequencer-querying-response","text":"","title":"Submitting Sequences to Sequencer & Querying response"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#creating-sequence","text":"A Sequence is a list of SequenceCommand which could be one of Setup, Observe or Wait. To create a Sequence, sequenceOf DSL could be used as shown below.\nKotlin val hcdCommand: SequenceCommand = Setup(\"TCS\", \"setup-tcs-hcd\")\nval assemblyCommand: SequenceCommand = Setup(\"TCS\", \"setup-tcs-assembly\")\nval sequence: Sequence = sequenceOf(hcdCommand, assemblyCommand)","title":"Creating Sequence"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#submitting-sequence-and-querying-response","text":"","title":"Submitting sequence and Querying response"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#submit-and-query","text":"In order to send Sequences to other Sequencers, you can use submit or submitAndWait DSL as shown in examples below. query and queryFinal DSL is provided to query response of the submitted sequence.\nKotlin val submitResponse: SubmitResponse = tcsSequencer.submit(sequence)\nval queryResponse: SubmitResponse = tcsSequencer.query(submitResponse.runId())\nquery returns the current response which could be either final response (eg. Completed) or intermediate response (eg. Started).","title":"Submit and Query"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#queryfinal","text":"Whereas queryFinal will wait for the final response of the sequence for the defaultTimeout specified at the time of creation of the Sequencer instance. This DSL will never return an intermediate response.\nKotlin val finalResponse: SubmitResponse = tcsSequencer.queryFinal(submitResponse.runId())\nIf you want to increase/decrease the defaultTimeout, you can use the other variation of the same DSL which takes a timeout.\nKotlin val finalRes: SubmitResponse = tcsSequencer.queryFinal(submitResponse.runId(), 5.seconds)","title":"QueryFinal"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#submit-and-wait","text":"The submitAndWait DSL is a combination of submit and queryFinal. If you are not interested in initial/intermediate response but only in final response of the Sequence, you can use this dsl. It submits the sequence and waits for the final response if the sequence was successfully Started. It will wait till the defaultTimeout specified at the time of creation of the Sequencer instance.\nKotlin val sequenceResponse: SubmitResponse = tcsSequencer.submitAndWait(sequence)\nIf you want to increase/decrease the default timeout, you can use the other variation of the same DSL which takes a timeout.\nKotlin val sequenceRes: SubmitResponse = tcsSequencer.submitAndWait(sequence, 5.seconds)","title":"Submit and Wait"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#going-online-offline","text":"","title":"Going online/offline"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#go-online","text":"This DSL is used to send online/offline commands to other sequencers. The Sequencer can go online only if it is currently in offline state. If this command is received in any other state apart from offline, an Unhandled response will be sent.\nIf the Sequencer is in Offline state, and it receives the goOnline command, the goOnline handlers of the receiving sequencer will be called. In case the handlers fail, a GoOnlineHookFailed response would be sent, resulting the Sequencer remains in the previous state. Else an Ok message is sent, and the Sequencer goes in online(idle) state.\nKotlin val response: GoOnlineResponse = tcsSequencer.goOnline()","title":"Go online"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#go-offline","text":"Go offline command is received in 2 states only.\nIf the Sequencer is Idle, which means it is not processing any sequence currently If the Sequencer is Loaded with a sequence\nIf this command is sent in any other state apart from these, an Unhandled response will be sent. If the Sequencer is in idle/loaded state, and it receives the goOffline command, the goOffline handlers of the receiving Sequencer will be called. In case the handlers fail, a GoOfflineHookFailed response would be sent, resulting the Sequencer remains in the previous state. Else an Ok message is sent, and the Sequencer goes to offline state.\nKotlin val offlineResponse: GoOfflineResponse = tcsSequencer.goOffline()","title":"Go offline"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#diagnostic-and-operations-mode","text":"","title":"Diagnostic and operations mode"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#diagnostic-mode","text":"The diagnostic data mode command is accepted by Sequencers in all states and DiagnosticModeResponse is sent. If the Sequencer has defined its diagnostic mode handlers, they will be called. If the handlers execute successfully, an Ok response is sent else DiagnosticHookFailed response is sent.\nKotlin val diagnosticModeResponse: DiagnosticModeResponse = tcsSequencer.diagnosticMode(utcTimeNow(), \"engineering\")","title":"Diagnostic mode"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#operations-mode","text":"Operations mode is accepted by Sequencers in all states and OperationsModeResponse is sent. If the Sequencer has defined its operations mode handlers, they will be called. If the handlers execute successfully, an Ok response is sent else OperationsHookFailed response is sent.\nKotlin val operationsModeResponse: OperationsModeResponse = tcsSequencer.operationsMode()","title":"Operations mode"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#aborting-and-stopping-sequence","text":"","title":"Aborting and Stopping Sequence"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#aborting","text":"This command is accepted only if the Sequencer is in InProgress state, which means it is executing a sequence currently. If this command is sent in any other state, an Unhandled response is returned. In all other cases, an Ok response is sent.\nOn receiving this command in InProgress state, the Sequencer will execute the abort sequence handlers and on completion of execution of handlers (whether successful or failed), the Sequencer will discard all the pending steps and return an Ok response.\nNote that, abort sequence does not abruptly terminate the in-flight step(s) which are already under execution. It will discard only the pending steps, and the sequence is finished gracefully after the inflight step(s) are finished.\nKotlin val abortResponse: OkOrUnhandledResponse = tcsSequencer.abortSequence()","title":"Aborting"},{"location":"/sequencer/scripts/dsl/services/sequencer-command-service.html#stopping","text":"Stopping sequence is very similar to aborting, only difference is that instead of abort handlers, the stop handlers are called. Script writers are expected to save state of sequencer-script in the Stop handlers.\nKotlin val stopResponse: OkOrUnhandledResponse = tcsSequencer.stop()","title":"Stopping"},{"location":"/sequencer/scripts/dsl/handlers.html","text":"","title":"Script Handlers"},{"location":"/sequencer/scripts/dsl/handlers.html#script-handlers","text":"All the handlers which could be defined in various scopes are described below. Note that, in all the below described handlers, error-handling for the block passed to handlers, needs to be taken care by the Script writers.","title":"Script Handlers"},{"location":"/sequencer/scripts/dsl/handlers.html#command-handlers","text":"","title":"Command Handlers"},{"location":"/sequencer/scripts/dsl/handlers.html#onsetup","text":"This handler is used to handle a Setup command sent to this sequencer. The handler takes two parameters:\ncommand name which is matched against the sequence command sent, if the command name matches, corresponding block provided is executed block of code which contains logic to act on the Setup command.\nKotlin onSetup(\"command1\") {\n    // split command and send to downstream\n    val assembly1 = Assembly(\"filter.wheel\", 5.seconds)\n    val assembly2 = Assembly(\"wfos.red.detector\", 5.seconds)\n    par(\n            { assembly1.submit(Setup(\"TCS.darknight\", \"command-1\")) },\n            { assembly2.submit(Setup(\"TCS.darknight\", \"command-1\")) }\n    )\n}\nIn the block provided to this handler, all the CSW services (Event, Alarm, Time Service, etc) and control DSL (loop, par etc) are accessible.","title":"onSetup"},{"location":"/sequencer/scripts/dsl/handlers.html#onobserve","text":"This handler is used to handle an Observe command sent to this sequencer. The handler takes two parameters:\ncommand name which is matched against the sequence command sent, if the command name matches, corresponding block provided is executed block of code which contains logic to act on the Observe command.\nKotlin onObserve(\"command2\") {\n    // do something\n}","title":"onObserve"},{"location":"/sequencer/scripts/dsl/handlers.html#online-and-offline-handlers","text":"","title":"Online and Offline Handlers"},{"location":"/sequencer/scripts/dsl/handlers.html#ongoonline","text":"On receiving the goOnline command, the onGoOnline handlers, if defined, will be called. Only if the handlers execute successfully, will the sequencer become online. Hence, error handling for the block passed to onGoOnline needs to be taken care of.\nKotlin onGoOnline {\n    // send command to downstream components\n    assembly.goOnline()\n}","title":"onGoOnline"},{"location":"/sequencer/scripts/dsl/handlers.html#ongooffline","text":"On receiving the goOffline command, the onGoOffline handlers, if defined, will be called. Only if the handlers execute successfully, will the sequencer become offline. Hence, error handling for the block passed to onGoOffline needs to be taken care of. Offline handlers could be written to clear the sequencer state before going offline.\nKotlin onGoOffline {\n    // send command to downstream components\n    assembly.goOffline()\n}","title":"onGoOffline"},{"location":"/sequencer/scripts/dsl/handlers.html#abort-sequence-handler","text":"Abort handler could be used to perform any cleanup tasks that need to be done before the current sequence is aborted. Note that, even if the handlers fail, the sequence will be aborted.\nKotlin onAbortSequence {\n    // cleanup steps to be done before aborting will go here\n}","title":"Abort Sequence Handler"},{"location":"/sequencer/scripts/dsl/handlers.html#stop-handler","text":"This handler is provided to clear/save the sequencer state before stopping. Note that, even if the handlers fail, the sequence will be stopped.\nKotlin onStop {\n    // steps for clearing sequencer-state before stopping will go here\n}","title":"Stop Handler"},{"location":"/sequencer/scripts/dsl/handlers.html#shutdown-handler","text":"This handler will be called just before the sequencer is shutdown. Note that, even if the handlers fail, the sequencer will be shutdown.\nKotlin onShutdown {\n    // cleanup steps to be done before shutdown will go here\n}","title":"Shutdown Handler"},{"location":"/sequencer/scripts/dsl/handlers.html#diagnostic-mode-handler","text":"This handler can be used to perform actions that need to be done when the sequencer goes in the diagnostic mode. The handler gets access to two parameters:\nstartTime: UTC time at which the diagnostic mode actions should take effect hint: represents supported diagnostic data mode by the Sequencer\nSequencer can choose to publish any diagnostic data in this handler based on the hint received, and/or send diagnostic command to downstream components.\nKotlin onDiagnosticMode { startTime, hint ->\n    // start publishing diagnostic data on a supported hint (for e.g. engineering)\n    when (hint) {\n        \"engineering\" -> {\n            val diagnosticEvent: SystemEvent = SystemEvent(\"esw.esw_darknight\", \"diagnostic\")\n            diagnosticEventCancellable = schedulePeriodically(startTime, 50.milliseconds) {\n                publishEvent(diagnosticEvent)\n            }\n        }\n    }\n}","title":"Diagnostic Mode Handler"},{"location":"/sequencer/scripts/dsl/handlers.html#operations-mode-handler","text":"This handler can be used to perform actions that need to be done when the sequencer goes in the operations mode. Script writers can use this handler to stop all the publishing being done by the diagnostic mode handler, and/or send operations mode command to downstream components.\nKotlin onOperationsMode {\n    // cancel all publishing events done from diagnostic mode\n    diagnosticEventCancellable?.cancel()\n    // send operations command to downstream\n    assembly.operationsMode()\n}","title":"Operations Mode Handler"},{"location":"/sequencer/scripts/dsl/handlers.html#error-handlers","text":"Script can error out in following scenarios:\nScript Initialization Error : When construction of script throws exception then script initialization fails. In this scenario, framework will log error cause. Sequencer will not start in this failure. One need to fix error and then load script again. Command Handlers Failure : While executing sequence Command Handlers e.g. onSetup , onObserve can fail because of two reasons: handler throws exception or Command Service or Sequencer Command Service used to interact with downstream Assembly/HCD/Sequencer returns negative SubmitResponse. Negative SubmitResponse is by default considered as error. In this case of failure, sequence is terminated with failure. Handlers Failure : This failure occurs when any of handlers other than Command Handlers fail (e.g. OnGoOnline, onDiagnosticMode etc.). In this scenario, framework will log error cause. Sequence execution will continue.\nScript DSL provides following constructs to handle failure while executing script:\nonGlobalError : This construct is provided for script writer. Logic in onGlobalError will be executed in case of all Handlers Failure including Command Handlers Failure except Shutdown Handler. If onGlobalError handler is not provided by script then only logging of error cause is done by the framework.\nFollowing example shows usage of onGloablError\nKotlin // Scenario-1 onObserve handler fails\nonObserve(\"trigger-filter-wheel\") { command ->\n    val triggerStartEvent = ObserveEvent(\"esw.command\", \"trigger.start\", command(stringKey(name = \"triggerTime\")))\n    // publishEvent fails with EventServerNotAvailable which fails onObserve handler\n    // onGlobalError handler is called\n    // Sequence is terminated with failure.\n    publishEvent(triggerStartEvent)\n}\n\n// Scenario-2 onSetup handler fails - submit returns negative SubmitResponse\nonSetup(\"command-2\") { command ->\n    val assembly1 = Assembly(\"filter.wheel\", 5.seconds)\n\n    //Submit command to assembly return negative response. (error by default) onGlobalError handler is called.\n    // Sequence is terminated with failure.\n    assembly1.submit(command)\n}\n\n// Scenario-3\nonDiagnosticMode {startTime, hint ->\n    //publishEvent fails with EventServerNotAvailable\n    //onDiagnosticMode handler fails\n    //onGlobalError is called. Sequence execution continues.\n    publishEvent(ObserveEvent(\"esw.diagnostic.mode\", hint))\n}\n\nonGlobalError { error ->\n    val errorReason = stringKey(\"reason\").set(error.reason)\n    val observationEndEvent = ObserveEvent(\"esw.observation.end\", \"error\", errorReason)\n    publishEvent(observationEndEvent)\n}\nonError : This construct is specifically provided for Command Handlers Failure. onError block can be written specifically for each onSetup and onObserve handler. In case of failure, onError will be called first followed by onGlobalError and sequence will be terminated with failure. By default negative SubmitResponse is considered as error.\nFollowing example shows command level error handler along with global error handler. onError construct is available to handle failure of onSetup and onObserve command handler. In this example, submit to assembly return negative SubmitResponse triggers error handling mechanism.\nKotlin onSetup(\"submit-error-handling\") { command ->\n\n    /* =========== Scenario-1 (default) ============\n     * if submit returns negative response (which is considered as error by default)\n     * then current execution flow breaks and onError command handler gets invoked\n     * Hence, only Started (in case of long-running command) or Completed (in case of short running command) response is returned\n     */\n    val positiveSubmitResponse: CommandResponse.SubmitResponse = galilAssembly.submit(command)\n\n    //  First approach - using custom dsl (this is an alternative to kotlin pattern match using when)\n    positiveSubmitResponse\n            .onStarted { startedRes ->\n                val completedResponse = galilAssembly.queryFinal(startedRes.runId())\n                info(\"command completed with result: ${completedResponse.result}\")\n            }\n            .onCompleted { completed ->\n                info(\"command with ${completed.runId()} is completed with result: ${completed.result}\")\n            }\n\n    // Second approach - using kotlin pattern matching\n    when (positiveSubmitResponse) {\n        is CommandResponse.Started -> {\n            val completedResponse = galilAssembly.queryFinal(positiveSubmitResponse.runId())\n            info(\"command completed with response: $completedResponse\")\n        }\n        is CommandResponse.Completed -> info(\"command with ${positiveSubmitResponse.runId()} is completed\")\n    }\n\n}.onError { err ->\n    // onError is called when submit command to galil assembly fails\n    error(err.reason)\n}\nIf you don’t want to fail sequence in case of Command Service APIs while interacting with downstream Assembly/HCD (submit, query etc.) or Sequencer Command Service APIs while interacting with downstream Sequencer (submit, query etc.) then resumeOnError flag can be used. For details of resumeOnError, please refer Error handling\nNote Error in all handlers except Shutdown Handler will execute error handler provided by script. If error handler is not provided, framework will log error cause.","title":"Error Handlers"},{"location":"/sequencer/scripts/dsl/loop.html","text":"","title":"Loops"},{"location":"/sequencer/scripts/dsl/loop.html#loops","text":"Script supports following multiple variations of loop DSL to satisfy different use cases:\nloop waitFor loopAsync","title":"Loops"},{"location":"/sequencer/scripts/dsl/loop.html#loop-with-default-loop-interval","text":"The loop DSL allows you to start a “blocking” loop so that the rest of the code after loop will not be executed until stopWhen condition written inside loop becomes true. You can use this DSL when you want to iteratively perform some actions until certain condition becomes true. An interval can be provided to set the minimum period of the loop, where every iteration of loop will at least wait for minimum provided interval before executing next iteration. Otherwise, the default interval is 50 milliseconds.\nThe following example demonstrates the usage of the loop DSL with the default interval. In the loop body, a motor is being “moved” by 10 degrees in every iteration of the loop. The loop will be terminated when motor’s current position reaches the expected position of 100 degrees.\nKotlin var motorPosition = 0\nfun moveMotor(degrees: Int) {\n    // move motor logic\n    motorPosition += degrees\n}\nonSetup(\"move-motor\") {\n\n    val expectedMotorPosition = 100\n\n    // move motor by 10 degrees in each iteration, default loop interval is 50 millis\n    // stop loop when current motor position matches expected motor position and continue with the execution of rest of the handler\n    loop {\n        moveMotor(10)\n        stopWhen(motorPosition == expectedMotorPosition)\n    }\n}","title":"loop - With default loop interval"},{"location":"/sequencer/scripts/dsl/loop.html#loop-with-custom-minimum-loop-interval","text":"The following example demonstrates the usage of the loop DSL by providing a custom loop interval.\nKotlin onSetup(\"move-motor\") {\n\n    val expectedMotorPosition = 100\n    // move motor by 20 degrees in every iteration after a loop interval of 100 millis (custom loop interval used here)\n    // stop loop when current motor position matches expected motor position and continue with the execution of rest of the handler\n    loop(minInterval = 100.milliseconds) {\n        moveMotor(20)\n        stopWhen(motorPosition == expectedMotorPosition)\n    }\n}\nNote minInterval needs to be greater than default interval of 50 milliseconds otherwise it will be ignored and default loop interval will be used.","title":"loop - With custom minimum loop interval"},{"location":"/sequencer/scripts/dsl/loop.html#waitfor","text":"This is a specialized version of loop and satisfies simple use cases where you want to semantically block the execution until certain condition becomes true.\nIn the following example, initializeMotor method will start the initialization and eventually set motorUp flag to true indicating motor is successfully initialized. waitFor { motorUp } will check the value of motorUp flag every 50 milliseconds, and when it is true, the rest of the code execution will continue.\nKotlin var motorUp = false\n\nfun initializeMotor() {\n    // some motor initialization logic goes here\n    motorUp = true\n}\nonSetup(\"init-motor\") {\n    // start initializing motor and this method will set motorUp flag to true once initialization is successful\n    initializeMotor()\n    // pauses the init-motor command handlers execution until motor becomes up\n    waitFor { motorUp }\n\n    // rest of the handler implementation (here you can safely assume that motor is up)\n}","title":"waitFor"},{"location":"/sequencer/scripts/dsl/loop.html#loopasync-with-default-loop-interval","text":"The loopAsync DSL allows you to start loop asynchronously in the background which means rest of the code written after loopAsync will be executed concurrently. Like loop, loopAsync will be terminated when stopWhen condition written inside loop becomes true.\nYou can use this DSL when you want to iteratively perform some actions in the background. loopAsync also has a default interval of 50 milliseconds.\nFollowing example demonstrate the usage of loopAsync DSL using the default interval. In the loop body, current temperature is published every 50 milliseconds. The loopAsync will be terminated when stopPublishingTemperature flag becomes true, which is set to true in the onStop handler.\nKotlin var stopPublishingTemperature = false\nval temperatureEvent = ObserveEvent(\"IRIS.motor\", \"temperature\")\nval temperatureKey = longKey(\"temperature\")\n\nfun getCurrentTemp(): Long = TODO()\n\n// start background loop which publishes current temperature of motor every 50 milliseconds (default loop interval)\nloopAsync {\n    val currentTemp = getCurrentTemp()\n    publishEvent(temperatureEvent.add(temperatureKey.set(currentTemp)))\n    stopWhen(stopPublishingTemperature)\n}\n\nonStop {\n    stopPublishingTemperature = true\n}","title":"loopAsync - With default loop interval"},{"location":"/sequencer/scripts/dsl/loop.html#loopasync-with-custom-loop-interval","text":"The following example demonstrates the usage of loopAsync DSL with a custom loop interval.\nKotlin // start background loop which publishes current temperature of motor every 100 milliseconds\nloopAsync(minInterval = 100.milliseconds) {\n    val currentTemp = getCurrentTemp()\n    publishEvent(temperatureEvent.add(temperatureKey.set(currentTemp)))\n    stopWhen(stopPublishingTemperature)\n}","title":"loopAsync - With custom loop interval"},{"location":"/sequencer/scripts/dsl/loop.html#source-code-for-examples","text":"Loop Examples","title":"Source code for examples"},{"location":"/sequencer/scripts/dsl/misc.html","text":"","title":"Misc"},{"location":"/sequencer/scripts/dsl/misc.html#misc","text":"","title":"Misc"},{"location":"/sequencer/scripts/dsl/misc.html#par","text":"This utility is provided to support running multiple tasks in parallel. Call to par returns when all the submitted task completes.\nFollowing example demonstrate a use case of sending commands in parallel to multiple HCD’s.\nKotlin val prefix = \"ocs.primary\"\nval hcd1 = Hcd(\"IRIS.filter.wheel1\", 10.minutes)\nval hcd2 = Hcd(\"IRIS.filter.wheel2\", 10.minutes)\nval hcd3 = Hcd(\"IRIS.filter.wheel3\", 10.minutes)\n\nonSetup(\"setup-iris-hcds\") {\n    // send 3 setup commands to 3 HCD's in parallel\n    val responses: List<SubmitResponse> =\n            par(\n                    { hcd1.submit(Setup(prefix, \"move-10\")) },\n                    { hcd2.submit(Setup(prefix, \"move-10\")) },\n                    { hcd3.submit(Setup(prefix, \"move-10\")) }\n            )\n}","title":"par"},{"location":"/sequencer/scripts/dsl/misc.html#source-code-for-examples","text":"Misc Examples","title":"Source code for examples"},{"location":"/apps/apps.html","text":"","title":"Applications"},{"location":"/apps/apps.html#applications","text":"Prerequisites Getting ESW Apps sequencer-app","title":"Applications"},{"location":"/apps/apps.html#prerequisites","text":"For starting and running ESW apps for development, you need to run CSW services like location-server, event-service etc. Please refer to the doc here to run CSW services.","title":"Prerequisites"},{"location":"/apps/apps.html#getting-esw-apps","text":"Developer has to download esw-apps-<some-version>.zip from esw github releases and unzip it. There are two folders, as follows, in esw-apps-<some-version>\nbin lib\nAll the apps provided by ESW reside in bin folder.","title":"Getting ESW Apps"},{"location":"/apps/sequencerapp.html","text":"","title":"sequencer-app"},{"location":"/apps/sequencerapp.html#sequencer-app","text":"A command line application that facilitates starting Sequence Component and/or Sequencer.","title":"sequencer-app"},{"location":"/apps/sequencerapp.html#supported-commands","text":"seqcomp sequencer","title":"Supported Commands"},{"location":"/apps/sequencerapp.html#sequence-component-seqcomp-","text":"Spawns a new Sequence Component with provided subsytem and name. Note that with this command, only sequence component is spawned, not a sequencer. A separate loadScript command needs to be sent to the sequence component to spawn a sequencer inside it.\nSee sequencer command to spawn a sequence component and a sequencer in single command.\nOptions accepted by this command are described below:\n-s : subsystem of the sequence component, for e.g. tcs, iris etc -n, --name : optional name for sequence component, for e.g. primary, backup etc","title":"Sequence Component (seqcomp)"},{"location":"/apps/sequencerapp.html#examples-","text":"esw-ocs-app seqcomp -s tcs -n primary\nesw-ocs-app seqcomp -s tcs\nNote If sequence component name is not specified, a new name (prefixed with subsystem) will be generated for the sequence component. For e.g. TCS_123, IRIS_123","title":"Examples:"},{"location":"/apps/sequencerapp.html#sequencer-sequencer-","text":"Spawns two things:\nSequenceComponent: with provided subsystem, name Sequencer: with provided observing mode and subsytem of sequencer (-i option) if specified or else subsystem of sequence component (-s option)\nOptions accepted by this command are described below:\n-s : subsystem of the sequence component, for e.g. tcs, iris etc -n, --name : optional name for sequence component, for e.g. primary, backup etc -i : optional subsystem of sequencer script, for e.g. tcs, iris etc. Default value: subsystem provided by -s option -m, --mode : observing mode, for e.g. darknight","title":"Sequencer (sequencer)"},{"location":"/apps/sequencerapp.html#examples-","text":"Below example will spawn a sequence component OCS-primary and a sequencer TCS-darknight in it.\nesw-ocs-app sequencer -s ocs -n primary -i tcs -m darknight\nExample below will spawn a sequence component IRIS-primary and a sequencer IRIS-darknight in it.\nesw-ocs-app sequencer -s iris -n primary -m darknight","title":"Examples:"}]}