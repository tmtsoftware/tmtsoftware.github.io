{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/aas/csw-aas-js.html","text":"","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#javascript-adapter-csw-aas-js-","text":"csw-aas-js is an npm package which provides React components that integrate with the CSW Authentication and Authorization Service. UI applications can use these React components to enable the application to show or hide components based on the authentication and authorization policy. csw-aas-js is written in typescript and it bundles transpiled es6 module along with type declarations.","title":"Javascript Adapter (csw-aas-js)"},{"location":"/aas/csw-aas-js.html#dependencies","text":"To use the esw-ts adapter, run this command from root folder of your application where package.json exists:\nnpm     npm i --save esw-ts@0.1.0-SNAPSHOT\n yarn     yarn add esw-ts@0.1.0-SNAPSHOT","title":"Dependencies"},{"location":"/aas/csw-aas-js.html#application-configuration","text":"Web application needs following configurations in order to get access token from keycloak server. This application specific config object should be passed in AuthContextProvider component. There are two configurations needed for a web application i.e. realm, clientId\nrealm is a mandatory configuration which specified in keycloak server under which client for your application is registered.\nclientId is a mandatory configuration which specifies the client id of the app as per registration in keycloak server.\nJavascript export const AppConfig = {\n  realm: 'TMT',\n  clientId: 'tmt-frontend-app',\n  applicationName: 'test-app'\n}","title":"Application Configuration"},{"location":"/aas/csw-aas-js.html#components","text":"esw-ts exposes the following React components.\nAuthContextProvider Consumer Login Logout CheckLogin RealmRole\nComponents can be imported as shown in code snippet below\nJavascript import { AuthContext, Logout, Login } from 'esw-ts'","title":"Components"},{"location":"/aas/csw-aas-js.html#authcontextprovider","text":"AuthContextProvider is wrapper over a React Context.Provider. A JSON configuration file must be passed in that contains the application specific AAS server configuration (e.g. clientId, realm). When a user logs in, an AAS Server is instantiated, with the UI application specific configuration overriding the predefined configuration. Once the AAS sever is instantiated, an auth object is created with the needed attributes and APIs. This auth object is available to other React components; since AuthContextProvider is a Provider, its data can be shared with any of the children React components in its tree in a Consumer component (see below). All Consumers that are descendants of a Provider will re-render whenever the AuthContextProviderâ€™s state changes, e.g. a user authorizes. It is recommended to use AuthContextProvider to wrap the entire application so that data can be shared anywhere in application via a Consumer.\nJavascript <AuthContextProvider config={AppConfig}>\n  <BrowserRouter>\n    <div>\n      <NavComponent />\n      <Route\n        exact\n        path='/secured'\n        render={(_) => (\n          <CheckLogin error={<LoginError />}>\n            <Write />\n          </CheckLogin>\n        )}\n      />\n      <Route exact path='/config' render={(_) => <ConfigApp />} />\n      <Route\n        exact\n        path='/example_admin'\n        render={(_) => (\n          <CheckLogin error={<LoginError />}>\n            <RealmRole\n              realmRole='example-admin-role'\n              error={\n                <RoleError\n                  message={'User do not have role : example-admin-role'}\n                />\n              }>\n              <div>Example admin role specific functionality</div>\n            </RealmRole>\n          </CheckLogin>\n        )}\n      />\n      <Route\n        exact\n        path='/example_user'\n        render={(_) => (\n          <CheckLogin error={<LoginError />}>\n            <RealmRole\n              realmRole='person-role'\n              error={\n                <RoleError\n                  message={'User do not have role : person-role'}\n                />\n              }>\n              <div>Person role specific functionality</div>\n            </RealmRole>\n          </CheckLogin>\n        )}\n      />\n      <Route exact path='/public' component={Read} />\n    </div>\n  </BrowserRouter>\n</AuthContextProvider>","title":"AuthContextProvider"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"AuthContextProvider Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#consumer","text":"Consumer is similar to a React Context.Consumer. The shared auth object from the AuthContextProvider can be accessed using a Consumer component\nJavascript const { auth } = useContext(AuthContext)\nreturn (\n  <div className='nav-wrapper'>\n    {auth && auth.isAuthenticated() ? (\n      <div>\n        Hello, you are logged in\n        <div>Open functionality</div>\n      </div>\n    ) : (\n      <div>\n        Hello, you are not logged in\n        <div>Open functionality</div>\n      </div>\n    )}\n  </div>\n)","title":"Consumer"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"Consumer Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#login","text":"The Login component instantiates an AAS server with the configurations provided. It redirects to an AAS server login page for the user to login. After login, the auth object in the context is updated with the appropriate values, e.g. token, realm etc.\nJavascript <Login />","title":"Login"},{"location":"/aas/csw-aas-js.html#source-code-for-login-component","text":"Login Component","title":"Source code for Login component"},{"location":"/aas/csw-aas-js.html#logout","text":"The Logout component logs out the user from the AAS server. It clears the auth object stored in the context.\nJavascript   <Logout />\n) : (","title":"Logout"},{"location":"/aas/csw-aas-js.html#source-code-for-logout-component","text":"Logout Component","title":"Source code for Logout component"},{"location":"/aas/csw-aas-js.html#checklogin","text":"CheckLogin components provide ability to show something only if the user is logged in. In the following code snippet, Write is a react component that is shown only if the user is logged in. The behavior if the user is not logged in can be defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <CheckLogin error={<LoginError />}>\n  <Write />\n</CheckLogin>","title":"CheckLogin"},{"location":"/aas/csw-aas-js.html#source-code-for-checklogin-component","text":"CheckLogin Component","title":"Source code for CheckLogin component"},{"location":"/aas/csw-aas-js.html#realmrole","text":"RealmRole components provide the ability to show something only if the user is logged in and has the specified realm role. In the following code snippet, the contents of the div block are shown only if the user is logged in and has the realm role specified in the realmRole prop. Similar to CheckLogin, the behaviour if the user is not logged in can be optionally defined by an HTML element or React component that is passed into the component as an error property, shown as an ExampleError Component in following snippet.\nJavascript <RealmRole\n  realmRole='example-admin-role'\n  error={\n    <RoleError\n      message={'User do not have role : example-admin-role'}\n    />\n  }>\n  <div>Example admin role specific functionality</div>\n</RealmRole>\n<RealmRole\n  realmRole='person-role'\n  error={\n    <RoleError\n      message={'User do not have role : person-role'}\n    />\n  }>\n  <div>Person role specific functionality</div>\n</RealmRole>","title":"RealmRole"},{"location":"/aas/csw-aas-js.html#source-code-for-realmrole-component","text":"RealmRole Component","title":"Source code for RealmRole component"},{"location":"/aas/csw-aas-js.html#technical-description","text":"See csw-aas-js Technical Description.","title":"Technical Description"},{"location":"/clients/sequencer/sequencer-service.html","text":"","title":"Sequencer Service"},{"location":"/clients/sequencer/sequencer-service.html#sequencer-service","text":"This service provides a handle to send commands to a sequencer which is registered in location service.\nSequencer service has following APIs:\nAPI Input args Returns loadSequence sequence: SequenceCommand[] OkOrUnhandledResponse startSequence SubmitResponse add commands: SequenceCommand[] OkOrUnhandledResponse prepend commands: SequenceCommand[] OkOrUnhandledResponse replace id: string, commands: SequenceCommand[] GenericResponse insertAfter id: string, commands: SequenceCommand[] GenericResponse delete id: string GenericResponse addBreakpoint id: string GenericResponse removeBreakpoint id: string RemoveBreakpointResponse reset OkOrUnhandledResponse resume OkOrUnhandledResponse pause PauseResponse getSequence StepList or undefined isAvailable boolean isOnline boolean goOnline GoOnlineResponse goOffline GoOfflineResponse abortSequence OkOrUnhandledResponse stop OkOrUnhandledResponse diagnosticMode startTime: Date, hint: string DiagnosticModeResponse operationsMode OperationsModeResponse query runId: string SubmitResponse queryFinal runId: string, timeoutInSeconds: number SubmitResponse submit sequence: SequenceCommand[] SubmitResponse submitAndWait sequence: SequenceCommand[], timeoutInSeconds: number SubmitResponse","title":"Sequencer Service"},{"location":"/clients/sequencer/sequencer-service.html#creation-of-sequencer-service","text":"","title":"Creation of Sequencer Service"},{"location":"/clients/sequencer/sequencer-service.html#pre-requisite","text":"In order to use sequencer service client for a specific sequencer:\nThe sequencer and gateway server should be running. GatewayException(InvalidComponent) will be thrown if the specified sequencer not found in the location service. Authorization Token with correct access role. To read more on how to fetch access token. link.\nHere is an example:\nTypescript const tokenFactory = () => auth.token\n\nconst sequencerService: SequencerService = await SequencerService(\n  new ComponentId(new Prefix('ESW', 'darknight'), 'Sequencer'),\n  tokenFactory\n)","title":"Pre-requisite"},{"location":"/clients/sequencer/sequencer-service.html#apis","text":"","title":"APIs"},{"location":"/clients/sequencer/sequencer-service.html#creating-sequencecommands","text":"Typescript const eswTestPrefix = Prefix.fromString('TCS.darknight')\n\nconst setupCommand1 = new Setup(eswTestPrefix, 'setup-command1')\nconst setupCommand2 = new Setup(eswTestPrefix, 'setup-command2')\n\nconst observeCommand1 = new Observe(eswTestPrefix, 'observe-command1')\nconst observeCommand2 = new Observe(eswTestPrefix, 'observe-command2')","title":"Creating SequenceCommands"},{"location":"/clients/sequencer/sequencer-service.html#creating-a-sequence","text":"A sequence is a list of sequence commands:\nTypescript //sequence is a list of SequenceCommand\nconst sequence = [setupCommand1, observeCommand1]","title":"Creating a Sequence"},{"location":"/clients/sequencer/sequencer-service.html#loadsequence","text":"This API takes a sequence as a parameter, loads the sequence into the sequencer and returns the OkOrUnhandledResponse.\nTypescript const okOrUnhandledResponse: OkOrUnhandledResponse = await sequencerService.loadSequence(\n  sequence\n)","title":"loadSequence"},{"location":"/clients/sequencer/sequencer-service.html#startsequence","text":"This API starts the execution of the sequence which is loaded in the sequencer and return the SubmitResponse.\nTypescript const startSequenceRes: SubmitResponse = await sequencerService.startSequence()","title":"startSequence"},{"location":"/clients/sequencer/sequencer-service.html#add","text":"This API takes a list of SequenceCommands as a parameter, adds that at last of the sequence and returns the OkOrUnhandledResponse.\nTypescript const addResponse: OkOrUnhandledResponse = await sequencerService.add([\n  observeCommand2,\n  setupCommand2\n])","title":"add"},{"location":"/clients/sequencer/sequencer-service.html#prepend","text":"This API takes a list of SequenceCommands as a parameter, adds that before all the pending steps of the sequence and returns the OkOrUnhandledResponse.\nTypescript const prependResponse: OkOrUnhandledResponse = await sequencerService.prepend([\n  observeCommand2,\n  setupCommand2\n])","title":"prepend"},{"location":"/clients/sequencer/sequencer-service.html#replace","text":"This API takes an Id of a pending step(command) of the sequence and a list of SequenceCommands as parameters, replaces the command of the given Id with the given list of SequenceCommands and returns the GenericResponse.\nTypescript const replaceResponse: GenericResponse = await sequencerService.replace(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9',\n  [observeCommand2, setupCommand2]\n)","title":"replace"},{"location":"/clients/sequencer/sequencer-service.html#insertafter","text":"This API takes an Id of a pending step(command) of the sequence and a list of SequenceCommands as parameters, inserts the given list of SequenceCommands after the command of the given Id and returns the GenericResponse.\nTypescript const insertAfterResponse: GenericResponse = await sequencerService.insertAfter(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9',\n  [observeCommand2, setupCommand2]\n)","title":"insertAfter"},{"location":"/clients/sequencer/sequencer-service.html#delete","text":"This API takes an Id of a pending step(command) of the sequence as a parameter, deletes the step from the sequencer and returns the GenericResponse.\nTypescript const deleteResponse: GenericResponse = await sequencerService.delete(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9'\n)","title":"delete"},{"location":"/clients/sequencer/sequencer-service.html#addbreakpoint","text":"This API takes an Id of a pending step(command) of the sequence as a parameter, add a breakpoint to the step and returns the GenericResponse.\nTypescript const addBreakpointResponse: GenericResponse = await sequencerService.addBreakpoint(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9'\n)","title":"addBreakpoint"},{"location":"/clients/sequencer/sequencer-service.html#removebreakpoint","text":"This API takes an Id of a pending step(command) of the sequence as a parameter, removes the breakpoint from the step and returns the RemoveBreakpointResponse.\nTypescript const removeBreakpointResponse: RemoveBreakpointResponse = await sequencerService.removeBreakpoint(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9'\n)","title":"removeBreakpoint"},{"location":"/clients/sequencer/sequencer-service.html#reset","text":"Typescript const resetResponse: OkOrUnhandledResponse = await sequencerService.reset()","title":"reset"},{"location":"/clients/sequencer/sequencer-service.html#resume","text":"Typescript const resumeResponse: OkOrUnhandledResponse = await sequencerService.resume()","title":"resume"},{"location":"/clients/sequencer/sequencer-service.html#pause","text":"Typescript const pauseResponse: PauseResponse = await sequencerService.pause()","title":"pause"},{"location":"/clients/sequencer/sequencer-service.html#getsequence","text":"Typescript const getSequenceRes: Option<StepList> = await sequencerService.getSequence()","title":"getSequence"},{"location":"/clients/sequencer/sequencer-service.html#isavailable","text":"Typescript const isAvailable: boolean = await sequencerService.isAvailable()","title":"isAvailable"},{"location":"/clients/sequencer/sequencer-service.html#isonline","text":"Typescript const isOnline: boolean = await sequencerService.isOnline()","title":"isOnline"},{"location":"/clients/sequencer/sequencer-service.html#goonline","text":"Typescript const goOnlineResponse: GoOnlineResponse = await sequencerService.goOnline()","title":"goOnline"},{"location":"/clients/sequencer/sequencer-service.html#gooffline","text":"Typescript const goOfflineResponse: GoOfflineResponse = await sequencerService.goOffline()","title":"goOffline"},{"location":"/clients/sequencer/sequencer-service.html#abortsequence","text":"Typescript const abortResponse: OkOrUnhandledResponse = await sequencerService.abortSequence()","title":"abortSequence"},{"location":"/clients/sequencer/sequencer-service.html#stop","text":"Typescript const stopResponse: OkOrUnhandledResponse = await sequencerService.stop()","title":"stop"},{"location":"/clients/sequencer/sequencer-service.html#diagnosticmode","text":"Typescript const diagnosticResponse: DiagnosticModeResponse = await sequencerService.diagnosticMode(\n  new Date(),\n  'engineering'\n)","title":"diagnosticMode"},{"location":"/clients/sequencer/sequencer-service.html#operationsmode","text":"Typescript const operationsModeResponse: OperationsModeResponse = await sequencerService.operationsMode()","title":"operationsMode"},{"location":"/clients/sequencer/sequencer-service.html#submit","text":"Typescript const submitResponse: SubmitResponse = await sequencerService.submit(sequence)","title":"submit"},{"location":"/clients/sequencer/sequencer-service.html#submitandwait","text":"Typescript const submitAndWaitResponse: SubmitResponse = await sequencerService.submitAndWait(\n  sequence,\n  10\n)","title":"submitAndWait"},{"location":"/clients/sequencer/sequencer-service.html#query","text":"Typescript const queryResponse: SubmitResponse = await sequencerService.query(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9'\n)","title":"query"},{"location":"/clients/sequencer/sequencer-service.html#queryfinal","text":"Typescript const queryFinalResponse: SubmitResponse = await sequencerService.queryFinal(\n  'd99b6cf6-553c-49e9-9089-aaa494f116e9',\n  10\n)","title":"queryFinal"},{"location":"/index.html","text":"","title":"TMT JavaScript/Typescript Library"},{"location":"/index.html#tmt-javascript-typescript-library","text":"esw-ts provides following JavaScript adapters and typescript definitions for esw and csw services.","title":"TMT JavaScript/Typescript Library"},{"location":"/index.html#getting-started","text":"node is mandatory to be installed on machine for using esw-ts.\nesw-ts library is available on npm registry.","title":"Getting Started"},{"location":"/index.html#installation-","text":"To install latest version node. visit this nodeâ€™s official website.\nTo install latest version of esw-ts from npm\nnpm install esw-ts\nTo install a specific version\nnpm install esw-ts@{version}","title":"Installation:"},{"location":"/index.html#features","text":"AAS (Authentication and Authorization Support for web application)\nAAS Javascript Adapter (aas)\nClients:\nCommand Service Sequencer Service","title":"Features"},{"location":"/technical/csw-aas-js.html","text":"","title":"csw-aas-js - Javascript adapter"},{"location":"/technical/csw-aas-js.html#csw-aas-js-javascript-adapter","text":"csw-aas-js is a npm package which exposes react components to enable authentication and authorization. csw-aas-js is built in typescript on top of keycloak-js which is javascript adapter provided by keycloak.","title":"csw-aas-js - Javascript adapter"},{"location":"/technical/csw-aas-js.html#csw-aas-js-implementation","text":"Core implementation of csw-aas-js uses\nkeycloak-js - keycloak javascript adapter React - JavaScript library for building user interfaces Typescript - Types superset of JavaScript which compiles to JavaScript csw-location-service - resolve keycloak using location service http endpoint","title":"csw-aas-js Implementation"},{"location":"/technical/csw-aas-js.html#project-setup","text":"csw-aas-js is a library written in Typescript. tsc is a command line compiler of Typescript which compiles typescrit files to JavaScript. tsc picks up configurations from tsconfig.json file which is at root level of project. tsconfig.json allows to configure multiple compiler options. Please refer this for details of compiler options. npm run build command will run tsc which will produce outputs (.js and .d.ts). .d.ts files are the type declaration files which provide typings for react components exported by library. package.json points to index.ts as a entry point for library and index.d.ts as types. This will help csw-aas-js library users to know type signatures of components. e.g. type signature for react component props, api signatures. csw-aas-js can be seamlessly consumed by applications written ES6 or Typescript.","title":"Project setup"},{"location":"/technical/csw-aas-js.html#keycloak","text":"In order for web application utilize keycloak following steps are needed:\nRegistered web application as a public keycloak client Please refer to keycloak documentation for details. Create new Keycloak client instance This instantiation expects config which includes keycloak server url and some application specific config like realm and clientId. csw-aas-js uses csw location service to resolve keycloak server.\nJavascript export const AppConfig = {\n  realm: 'TMT',\n  clientId: 'tmt-frontend-app',\n  applicationName: 'test-app'\n}\nInitialize javascript adapter To call secure end point, web application first needs to be authenticated using keycloak server. There are two options to make this adapter automatically authenticate - login-required and check-sso. login-required will automatically authenticate if the user is already logged-in, otherwise it will display keycloak login page. check-sso will only authenticate if the user is already logged-in. If the user is not logged-in the browser will be redirected back to the application and remain unauthenticated.\ncsw-aas-js use check-sso to instantiate keycloak. It shows secure components if user is already logged in. If user is not authenticated Login component is rendered. If user clicks on login button it instantiates keyclock use login-required. This redirects user to keycloak login page. As access token has very short life span, at time of keycloak instantiation csw-aas-js also adds hooks to refresh token. This gives seamless user experience as user need not to login again.\nKeycloak adapter supports three authorization flows e.g. authorization code flow, implicit flow and hybrid flow. csw-aas-js has chosen hybrid flow as it has better performance than authorization code flow and unlike implicit flow, hybrid flow makes refresh token available to application. For more information please refer keyclok documentaion for authorization flows","title":"Keycloak"},{"location":"/technical/csw-aas-js.html#working-of-csw-aas-js","text":"When user opens web application in browser, AuthContextProvider component is mounted. Which does instantiation of keycloak client and initialize keycloak javascript adapter with check-sso and hybrid authorization flow. It also creates hooks for refreshing token when token is expired which silently refresh token resulting seamless user experience once logged in. After authentication is done via keycloak javascript adapter, AuthContext is extracted in domain model and this data is passed down the component tree using react context api. AuthContext gives handle to token, realm and resource roles, userInfo. Any component which want to use this information can become consumer of AuthContext. For example\nJavascript const { auth } = useContext(authContext)\nAccess token can be extracted from auth and it can be sent in Authorization header for calling secure api\nFor example -\nconst SampleComponent = () => {\n\n    const url = 'http://localhost:8080/secure-restful-service';\n    const auth = useContext(AuthContext) //AuthContext from csw-aas-js\n\n    const req = new XMLHttpRequest();\n    req.open('GET', url, true);\n    req.setRequestHeader('Accept', 'application/json');\n\n    //extract token from auth context and set Authorization header\n    req.setRequestHeader('Authorization', 'Bearer ' + auth.token);\n\n    req.onreadystatechange = function () {\n        if (req.readyState == 4) {\n            if (req.status == 200) {\n                alert('Success');\n            } else if (req.status == 403) {\n                alert('Forbidden');\n            }\n        }\n    }\n\n    req.send();\n};\nFollowing diagram explains javascript application flow for making request to secure http api\nWhen user opens web application in browser, csw-aas-js checks if user is already logged in using check-sso mode. If user is not logged in then Login button is shown. When user clicks on login, user will be redirected to keyclok login page. This completes authentication process. Once authentication is done, AuthContextProvider extract AuthContext domain model and make it available to consumers of AuthContext. Protected react components can be shown based on information in AuthContext. For example, CreateConfig component can be shown only to users having config admin role. After the user is authenticated the application can make requests to RESTful services secured by Keycloak by including the bearer token in the Authorization header. This completed workflow for web application calling secure http endpoint.","title":"Working of csw-aas-js"},{"location":"/clients/command/command-service.html","text":"","title":"Command Service"},{"location":"/clients/command/command-service.html#command-service","text":"This client side service provides a handle to send commands to a component which is registered in location service.\nCommand service has following APIs:\nAPI Input args Returns validate ControlCommand ValidateResponse submit ControlCommand SubmitResponse oneway ControlCommand OnewayResponse query runId SubmitResponse queryFinal runId, timeoutInSeconds SubmitResponse subscribeCurrentState stateNames, onStateChangeCallback Subscription submitAndWait ControlCommand, timeoutInSeconds SubmitResponse submitAllAndWait ControlCommand[ ], timeoutInSeconds SubmitResponse[ ]","title":"Command Service"},{"location":"/clients/command/command-service.html#creation-of-command-service","text":"","title":"Creation of Command Service"},{"location":"/clients/command/command-service.html#pre-requisite","text":"In order to use command service for a specific component:\nThe component needs to be up and running behind the gateway server. GatewayException(InvalidComponent) will be thrown if the specified component is not found. Authorization Token with correct access role. To read more on how to fetch access token. link.\nFor the given example : Prefix(ESW.Component1) needs to be registered in the location service as any of the component type (HCD, Assembly, etc.).\nTo create Command service client for a component\nTypescript const tokenFactory = () => auth.token\n\nconst commandService: CommandService = await CommandService(\n  new ComponentId(new Prefix('ESW', 'Component1'), 'HCD'),\n  tokenFactory\n)","title":"Pre-requisite"},{"location":"/clients/command/command-service.html#control-commands","text":"In order to call following api, one of the control command needs to be sent. Depending on your use case, you will be sending either Setup or Observe Command.\nFollowing examples show how to create control commands:\nTypescript // Definition of control command looks like following\ntype ControlCommand = Setup | Observe\n\n// examples\nconst setupCommand: Setup = new Setup(\n  new Prefix('ESW', 'Component1'),\n  'move-command',\n  paramSet,\n  'obs-id'\n)\n\nconst observeCommand: Observe = new Observe(\n  new Prefix('ESW', 'Component1'),\n  'c1',\n  paramSet,\n  'obs-id'\n)","title":"Control Commands"},{"location":"/clients/command/command-service.html#apis","text":"Async-Await Note that the examples are using async/await which makes handling of promises more readable.","title":"APIs"},{"location":"/clients/command/command-service.html#validate","text":"This api takes Control command as input parameter and return a promise of ValidateResponse.\nThe following example shows how to call validate api :\nTypescript const validateResponse1: ValidateResponse = await commandService.validate(\n  setupCommand\n)\n// or\nconst validateResponse2: ValidateResponse = await commandService.validate(\n  observeCommand\n)","title":"Validate"},{"location":"/clients/command/command-service.html#submit","text":"This api takes Control command as input parameter and return a promise of SubmitResponse.\nThe following example shows how to call submit api :\nTypescript const submitResponse1: SubmitResponse = await commandService.submit(\n  setupCommand\n)\n// or\nconst submitResponse2: SubmitResponse = await commandService.submit(\n  observeCommand\n)","title":"Submit"},{"location":"/clients/command/command-service.html#oneway","text":"This api takes Control command as input parameter and return a promise of OnewayResponse.\nThe following example shows how to call oneway api :\nTypescript const onewayResponse1: OnewayResponse = await commandService.oneway(\n  setupCommand\n)\n// or\nconst onewayResponse2: OnewayResponse = await commandService.oneway(\n  observeCommand\n)","title":"Oneway"},{"location":"/clients/command/command-service.html#query","text":"This api takes runId of already submitted command as input parameter and return a promise of SubmitResponse.\nThe following example shows how to call query api :\nTypescript // Submit a long running command\nconst res: SubmitResponse = await commandService.submit(setupCommand)\n// .\n// .\n// .\n// Get the current result of long running command as :\nconst queryResponse: SubmitResponse = await commandService.query(res.runId)","title":"Query"},{"location":"/clients/command/command-service.html#query-final","text":"This api is same as query , only difference is takes time-out (seconds) along with runId of already submitted command as input parameter and return a promise of SubmitResponse.\nThe following example shows how to call query final api :\nTypescript // Submit a long running command\nconst result: SubmitResponse = await commandService.submit(setupCommand)\n// .\n// .\n// .\n// Get the final result of long running command within 10 seconds :\nconst queryFinalResponse: SubmitResponse = await commandService.queryFinal(\n  result.runId,\n  10\n)","title":"Query Final"},{"location":"/clients/command/command-service.html#subscribe-current-state","text":"This api takes set of current states to be subscribed along with a callback which will get triggered on change of the mentioned states.(stateName1,stateName2)\nThe following example shows how subscribeCurrentState api call would look like :\nTypescript // subscribe to this set of current states\nconst currentStates = new Set(['stateName1', 'stateName2'])\n\n// this callback gets called whenever the state changes\nconst onStateChangeCallback = (currentState: CurrentState) => {\n  // do something when state changes\n  console.log('changed state:', currentState)\n}\n\n// subscribe call\nconst subscription: Subscription = await commandService.subscribeCurrentState(\n  currentStates\n)(onStateChangeCallback)\n\n// .\n// .\n// .\n// subscription can be cancelled when it is not required any more\nsubscription.cancel()","title":"Subscribe Current State"},{"location":"/clients/command/command-service.html#submit-and-wait","text":"This api takes Control command as input parameter along with time-out(seconds) and return a promise of SubmitResponse after waiting for a specified amount of time.\nThe following example shows how submitAndWait api call would look like :\nTypescript // Submit a long running command and wait for the result for specific time\n\nconst submitAndWaitResponse: SubmitResponse = await commandService.submitAndWait(\n  setupCommand,\n  10\n)","title":"Submit And Wait"},{"location":"/clients/command/command-service.html#submit-all-and-wait","text":"This api takes multiple control commands as input parameter along with time-out(seconds) and return a promise of SubmitResponse[] after waiting for a specified amount of time.\nThe following example shows how submitAllAndWait api call would look like :\nTypescript // Submit multiple commands and wait for the result of each submitted command for specific time\n\nconst submitAllAndWaitResponse: SubmitResponse[] = await commandService.submitAllAndWait(\n  [setupCommand, observeCommand],\n  10\n)","title":"Submit All And Wait"}]}